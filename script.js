const API_KEY = 'c708426913319b328c4ff4719583d1c6';
const BASE_URL = 'https://api.openweathermap.org';

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    citySearch: document.querySelector('#citySearch'),
    searchButton: document.querySelector('#searchButton'),
    weatherResult: document.querySelector('#weatherResult'),
    temperature: document.querySelector('#temperature'),
    cityName: document.querySelector('#cityName'),
    weatherDescription: document.querySelector('#weatherDescription'),
    feelsLike: document.querySelector('#feelsLike'),
    maxTemp: document.querySelector('#maxTemp'),
    minTemp: document.querySelector('#minTemp'),
    humidity: document.querySelector('#humidity'),
    windSpeed: document.querySelector('#windSpeed'),
    visibility: document.querySelector('#visibility'),
    forecastDays: document.querySelector('#forecastDays'),
    tipsContainer: document.querySelector('#tipsContainer'),
    weeklyForecastContainer: document.querySelector('#weeklyForecastContainer')
};

// –ò–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
const weatherEmoji = {
    "01d": "‚òÄÔ∏è", "01n": "üåô",
    "02d": "‚õÖ", "02n": "‚òÅÔ∏è",
    "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è",
    "04d": "‚òÅÔ∏è", "04n": "‚òÅÔ∏è",
    "09d": "üåßÔ∏è", "09n": "üåßÔ∏è",
    "10d": "üå¶Ô∏è", "10n": "üåßÔ∏è",
    "11d": "‚õàÔ∏è", "11n": "‚õàÔ∏è",
    "13d": "üå®Ô∏è", "13n": "üå®Ô∏è",
    "50d": "üå´Ô∏è", "50n": "üå´Ô∏è"
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤
async function loadFarmerTips() {
    try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–≤–µ—Ç–æ–≤...');
        const response = await fetch('https://alihanvu.github.io/weather-app/farmer-tips.json?' + new Date().getTime(), {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Cache-Control': 'no-cache'
            }
        });
        
        console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('–°–æ–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
        return data;
    } catch (error) {
        console.error('–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–≤–µ—Ç–æ–≤:', error);
        
        try {
            // –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            const defaultTips = {
                "temperature": {
                    "hot": {
                        "tips": ["–ü–æ–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Ä–∞–Ω–æ —É—Ç—Ä–æ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º—É–ª—å—á—É –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤–ª–∞–≥–∏"]
                    },
                    "moderate": {
                        "tips": ["–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö"]
                    },
                    "cold": {
                        "tips": ["–ó–∞—â–∏—Ç–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç –∑–∞–º–æ—Ä–æ–∑–∫–æ–≤", "–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ–ª–∏–≤ –≤ —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É"]
                    }
                },
                "humidity": {
                    "high": {
                        "tips": ["–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –≥—Ä–∏–±–∫–æ–≤—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π", "–û–±–µ—Å–ø–µ—á—å—Ç–µ —Ö–æ—Ä–æ—à—É—é –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é —Ä–∞—Å—Ç–µ–Ω–∏–π"]
                    },
                    "normal": {
                        "tips": ["–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ–ª–∏–≤", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –ø–µ—Ä–µ–¥ –ø–æ–ª–∏–≤–æ–º"]
                    },
                    "low": {
                        "tips": ["–£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª–∏–≤–∞", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø–µ–ª—å–Ω–æ–≥–æ –æ—Ä–æ—à–µ–Ω–∏—è"]
                    }
                },
                "seasons": {
                    "spring": {
                        "tips": ["–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≥—Ä—è–¥–∫–∏ –∫ –ø–æ—Å–∞–¥–∫–µ", "–ù–∞—á–Ω–∏—Ç–µ –≤—ã—Å–∞–∂–∏–≤–∞—Ç—å —Ö–æ–ª–æ–¥–æ—Å—Ç–æ–π–∫–∏–µ –∫—É–ª—å—Ç—É—Ä—ã"]
                    },
                    "summer": {
                        "tips": ["–ó–∞—â–∏—Ç–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞", "–°–æ–±–∏—Ä–∞–π—Ç–µ —É—Ä–æ–∂–∞–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ"]
                    },
                    "autumn": {
                        "tips": ["–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å–∞–¥ –∫ –∑–∏–º–µ", "–í—Ä–µ–º—è –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –æ–∑–∏–º—ã—Ö –∫—É–ª—å—Ç—É—Ä"]
                    },
                    "winter": {
                        "tips": ["–ó–∞—â–∏—Ç–∏—Ç–µ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç –º–æ—Ä–æ–∑–∞", "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ—Å–∞–¥–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–∑–æ–Ω"]
                    }
                }
            };
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã');
            return defaultTips;
        } catch (altError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:', altError);
            return null;
        }
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(timestamp) {
    return new Date(timestamp * 1000).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
    });
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
function getDayOfWeek(timestamp) {
    const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    return days[new Date(timestamp * 1000).getDay()];
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
function getCurrentSeason() {
    const month = new Date().getMonth();
    if (month >= 2 && month <= 4) return 'spring';
    if (month >= 5 && month <= 7) return 'summer';
    if (month >= 8 && month <= 10) return 'autumn';
    return 'winter';
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP
async function getLocationByIP() {
    return new Promise((resolve, reject) => {
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const timeoutId = setTimeout(() => {
            console.error('–¢–∞–π–º–∞—É—Ç IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
            resolve('–ú–æ—Å–∫–≤–∞'); // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≥–æ—Ä–æ–¥ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
        }, 5000); // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç

        fetch('https://ipapi.co/json/')
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP –æ—à–∏–±–∫–∞! —Å—Ç–∞—Ç—É—Å: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
                resolve(data.city || '–ú–æ—Å–∫–≤–∞');
            })
            .catch(error => {
                clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                console.error('–û—à–∏–±–∫–∞ IP-–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                resolve('–ú–æ—Å–∫–≤–∞'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            });
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function getUserLocation() {
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            reject(new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'));
            return;
        }

        const options = {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 0
        };

        navigator.geolocation.getCurrentPosition(
            async (position) => {
                try {
                    const { latitude, longitude } = position.coords;
                    try {
                        const response = await fetch(
                            `${BASE_URL}/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&limit=1&appid=${API_KEY}`
                        );
                        if (!response.ok) {
                            throw new Error(`HTTP –æ—à–∏–±–∫–∞! —Å—Ç–∞—Ç—É—Å: ${response.status}`);
                        }
                        const data = await response.json();
                        if (data.length > 0) {
                            resolve(data[0].name);
                        } else {
                            reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥'));
                        }
                    } catch (fetchError) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:', fetchError);
                        reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É: ' + fetchError.message));
                    }
                } catch (error) {
                    reject(error);
                }
            },
            (error) => {
                let errorMessage;
                switch(error.code) {
                    case error.PERMISSION_DENIED:
                        errorMessage = "–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω";
                        break;
                    case error.POSITION_UNAVAILABLE:
                        errorMessage = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
                        break;
                    case error.TIMEOUT:
                        errorMessage = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è";
                        break;
                    default:
                        errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                }
                reject(new Error(errorMessage));
            },
            options
        );
    });
}

// –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
function cacheWeatherData(city, data) {
    localStorage.setItem('weatherData', JSON.stringify({
        city,
        data,
        timestamp: Date.now()
    }));
}

function getCachedWeatherData() {
    const cached = localStorage.getItem('weatherData');
    if (!cached) return null;
    
    const parsedData = JSON.parse(cached);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
    if (Date.now() - parsedData.timestamp > 3600000) return null;
    
    return parsedData;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function fetchWeatherData(city) {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        const cachedData = getCachedWeatherData();
        if (cachedData && cachedData.city === city) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è', city);
            return cachedData.data;
        }

        const geoUrl = `${BASE_URL}/geo/1.0/direct?q=${encodeURIComponent(city)}&limit=1&appid=${API_KEY}`;
        const geoResponse = await fetch(geoUrl);
        
        if (!geoResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ${geoResponse.status}`);
        }
        
        const geoData = await geoResponse.json();

        if (!geoData.length) {
            throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const { lat, lon } = geoData[0];

        const weatherUrl = `${BASE_URL}/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`;
        const forecastUrl = `${BASE_URL}/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`;
        
        const weatherResponse = await fetch(weatherUrl);
        const forecastResponse = await fetch(forecastUrl);
        
        if (!weatherResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã: ${weatherResponse.status}`);
        }
        
        if (!forecastResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: ${forecastResponse.status}`);
        }
        
        const weather = await weatherResponse.json();
        const forecast = await forecastResponse.json();
        
        const result = { weather, forecast };
        
        // –ö–µ—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cacheWeatherData(city, result);
        
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:', error);
        showError(error.message);
        throw error;
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é
async function generateFarmerTips(weatherData) {
    const tips = await loadFarmerTips();
    if (!tips) {
        return ["–ü–æ–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏", 
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ—á–≤—ã", 
                "–ó–∞—â–∏—â–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"];
    }

    const result = [];
    const temp = weatherData.main.temp;
    const humidity = weatherData.main.humidity;
    const windSpeed = weatherData.wind.speed;

    // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    if (temp >= 25) result.push(...tips.temperature.hot.tips);
    else if (temp >= 15) result.push(...tips.temperature.moderate.tips);
    else result.push(...tips.temperature.cold.tips);

    // –°–æ–≤–µ—Ç—ã –ø–æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    if (humidity >= 70) result.push(...tips.humidity.high.tips);
    else if (humidity >= 40) result.push(...tips.humidity.normal.tips);
    else result.push(...tips.humidity.low.tips);

    // –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    result.push(...tips.seasons[getCurrentSeason()].tips);

    return [...new Set(result)].slice(0, 5);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
function updateCurrentWeather(data) {
    try {
        const { main, weather, name, visibility, wind } = data;
        
        elements.cityName.textContent = name;
        elements.temperature.textContent = `${Math.round(main.temp)}¬∞`;
        elements.weatherDescription.textContent = weather[0].description.charAt(0).toUpperCase() + 
                                                weather[0].description.slice(1);
        elements.feelsLike.textContent = `${Math.round(main.feels_like)}¬∞`;
        elements.maxTemp.textContent = Math.round(main.temp_max);
        elements.minTemp.textContent = Math.round(main.temp_min);
        elements.humidity.textContent = `${main.humidity}%`;
        elements.windSpeed.textContent = `${wind.speed.toFixed(1)} –º/—Å`;
        elements.visibility.textContent = `${(visibility / 1000).toFixed(1)} –∫–º`;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
function updateHourlyForecast(forecast) {
    try {
        elements.forecastDays.innerHTML = '';
        
        if (!forecast || !forecast.list || !Array.isArray(forecast.list)) {
            console.error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞:', forecast);
            return;
        }
        
        forecast.list.slice(0, 24).forEach((item, index) => {
            const hourlyDiv = document.createElement('div');
            hourlyDiv.className = 'forecast-hour';
            hourlyDiv.style.animationDelay = `${index * 0.1}s`;
            
            const icon = item.weather && item.weather[0] && item.weather[0].icon 
                ? weatherEmoji[item.weather[0].icon] 
                : "üå¶Ô∏è";
            
            hourlyDiv.innerHTML = `
                <div class="forecast-time">${index === 0 ? '–°–µ–π—á–∞—Å' : formatTime(item.dt)}</div>
                <div class="forecast-icon">${icon}</div>
                <div class="forecast-temp">${Math.round(item.main.temp)}¬∞</div>
            `;
            
            elements.forecastDays.appendChild(hourlyDiv);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
function updateWeeklyForecast(forecast) {
    try {
        elements.weeklyForecastContainer.innerHTML = '';
        
        if (!forecast || !forecast.list || !Array.isArray(forecast.list)) {
            console.error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', forecast);
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –¥–Ω—è–º
        const dailyForecasts = {};
        forecast.list.forEach(item => {
            const date = new Date(item.dt * 1000);
            const day = date.toISOString().split('T')[0];
            
            if (!dailyForecasts[day]) {
                // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                const fullDayName = getDayOfWeek(item.dt);
                const shortDayName = fullDayName.substring(0, 3); // –ü–µ—Ä–≤—ã–µ 3 –±—É–∫–≤—ã
                
                dailyForecasts[day] = {
                    temps: [],
                    weather: [],
                    day: fullDayName,
                    shortDay: shortDayName
                };
            }
            
            dailyForecasts[day].temps.push(item.main.temp);
            
            if (item.weather && item.weather[0] && item.weather[0].icon) {
                dailyForecasts[day].weather.push(item.weather[0].icon);
            }
        });
        
        // –í—ã–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–Ω–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        const uniqueDays = Object.values(dailyForecasts).slice(0, 7);
        
        uniqueDays.forEach((dayData, index) => {
            const avgTemp = Math.round(
                dayData.temps.reduce((a, b) => a + b, 0) / dayData.temps.length
            );
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
            let mostFrequentIcon = "01d"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (dayData.weather && dayData.weather.length > 0) {
                mostFrequentIcon = dayData.weather.reduce(
                    (a, b) => dayData.weather.filter(v => v === a).length >= dayData.weather.filter(v => v === b).length ? a : b
                );
            }
            
            const dayElement = document.createElement('div');
            dayElement.className = 'weekly-day';
            dayElement.style.animationDelay = `${index * 0.1}s`;
            
            dayElement.innerHTML = `
                <div class="weekly-day-name">${dayData.day}</div>
                <div class="weekly-day-icon">${weatherEmoji[mostFrequentIcon]}</div>
                <div class="weekly-day-temp">${avgTemp}¬∞</div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ ripple
            dayElement.addEventListener('click', createRipple);
            
            elements.weeklyForecastContainer.appendChild(dayElement);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function updateFarmerTips(weatherData) {
    try {
        const tips = await generateFarmerTips(weatherData);
        elements.tipsContainer.innerHTML = '';
        
        tips.forEach((tip, index) => {
            const tipElement = document.createElement('div');
            tipElement.className = 'tip-item';
            tipElement.style.animationDelay = `${index * 0.1}s`;
            
            tipElement.innerHTML = `
                <span class="tip-icon">üå±</span>
                <span class="tip-text">${tip}</span>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ ripple
            tipElement.addEventListener('click', createRipple);
            
            elements.tipsContainer.appendChild(tipElement);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        elements.tipsContainer.innerHTML = `
            <div class="tip-item">
                <span class="tip-icon">üå±</span>
                <span class="tip-text">–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç</span>
            </div>
            <div class="tip-item">
                <span class="tip-icon">üå±</span>
                <span class="tip-text">–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–∏–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–æ–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏</span>
            </div>
        `;
    }
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
function showError(message) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    const existingErrors = document.querySelectorAll('.error-notification');
    existingErrors.forEach(error => error.remove());
    
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-notification';
    errorDiv.textContent = message;
    document.body.appendChild(errorDiv);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => errorDiv.classList.add('show'), 10);
    
    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        errorDiv.classList.add('hide');
        setTimeout(() => errorDiv.remove(), 300);
    }, 5000);
}

// –ò–Ω–¥–∏–∫–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
function showLoading(message = '–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...') {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–≤–µ—Ä–ª–µ–π –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    hideLoading();
    
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading-overlay';
    loadingDiv.innerHTML = `
        <div class="loading-spinner">
            <div class="loading-text">${message}</div>
        </div>
    `;
    document.body.appendChild(loadingDiv);
}

function hideLoading() {
    const loadingDiv = document.querySelector('.loading-overlay');
    if (loadingDiv) {
        loadingDiv.classList.add('fade-out');
        setTimeout(() => loadingDiv.remove(), 300);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ ripple
function createRipple(event) {
    const target = event.currentTarget;
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã ripple
    const existingRipples = target.querySelectorAll('.ripple');
    existingRipples.forEach(ripple => ripple.remove());
    
    const ripple = document.createElement('span');
    const diameter = Math.max(target.clientWidth, target.clientHeight);
    const radius = diameter / 2;

    const rect = target.getBoundingClientRect();
    ripple.style.width = ripple.style.height = `${diameter}px`;
    ripple.style.left = `${event.clientX - rect.left - radius}px`;
    ripple.style.top = `${event.clientY - rect.top - radius}px`;
    ripple.className = 'ripple';

    target.appendChild(ripple);
    
    // –£–¥–∞–ª—è–µ–º ripple –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        if (ripple && ripple.parentNode === target) {
            target.removeChild(ripple);
        }
    }, 600);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    showLoading('–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...');
    
    try {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPS
        const city = await Promise.race([
            getUserLocation(),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏')), 10000)
            )
        ]);
        await loadWeatherData(city);
    } catch (gpsError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPS:', gpsError);
        
        try {
            showLoading('–û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP...');
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è IP-–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            const city = await getLocationByIP();
            await loadWeatherData(city);
        } catch (ipError) {
            console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP:', ipError);
            // –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await loadWeatherData('–ú–æ—Å–∫–≤–∞');
        }
    } finally {
        hideLoading();
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É
async function loadWeatherData(city) {
    try {
        showLoading(`–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è ${city}...`);
        const data = await fetchWeatherData(city);
        updateCurrentWeather(data.weather);
        updateHourlyForecast(data.forecast);
        updateWeeklyForecast(data.forecast);
        await updateFarmerTips(data.weather);
        elements.weatherResult.classList.remove('hidden');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:', error);
        showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≥–æ–¥—É: ${error.message}`);
    } finally {
        hideLoading();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
function handleSearch() {
    const city = elements.citySearch.value.trim();
    if (city) {
        loadWeatherData(city);
    } else {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    elements.searchButton.addEventListener('click', handleSearch);
    elements.citySearch.addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
            handleSearch();
        }
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç ripple –∫–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    document.querySelectorAll('.search-button, .detail-item, .tip-item, .weekly-day').forEach(element => {
        element.addEventListener('click', createRipple);
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–≥–æ–¥—ã
    initApp();
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
window.addEventListener('focus', () => {
    const cached = getCachedWeatherData();
    if (cached) {
        const cacheTime = Date.now() - cached.timestamp;
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∫–µ—à —Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç
        if (cacheTime > 15 * 60 * 1000) {
            if (elements.cityName.textContent) {
                loadWeatherData(elements.cityName.textContent);
            } else if (cached.city) {
                loadWeatherData(cached.city);
            }
        }
    }
});
