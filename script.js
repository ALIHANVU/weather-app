const cityInput = document.getElementById('cityInput');
const getWeatherBtn = document.getElementById('getWeatherBtn');
const locationElement = document.getElementById('location');
const currentTempElement = document.getElementById('current-temp');
const currentFeelsLikeElement = document.getElementById('current-feels-like');
const currentConditionElement = document.getElementById('current-condition');
const themeToggle = document.getElementById('themeToggle');
const returnBtn = document.getElementById('returnBtn');
const dailyForecastContainer = document.querySelector('.daily');
const farmerTipsContainer = document.querySelector('#farmer-tips-content');
const appContainer = document.querySelector('.app-container');
let isDarkTheme = false;

const apiKey = 'c708426913319b328c4ff4719583d1c6';

const weatherEmojiMap = {
    "01d": "‚òÄÔ∏è", 
    "01n": "üåï", 
    "02d": "‚õÖ", 
    "02n": "üå•Ô∏è", 
    "03d": "‚òÅÔ∏è", 
    "03n": "‚òÅÔ∏è", 
    "04d": "‚òÅÔ∏è", 
    "04n": "‚òÅÔ∏è", 
    "09d": "üå¶Ô∏è", 
    "09n": "üå¶Ô∏è", 
    "10d": "üåßÔ∏è", 
    "10n": "üåßÔ∏è", 
    "11d": "‚õàÔ∏è", 
    "11n": "‚õàÔ∏è", 
    "13d": "‚ùÑÔ∏è", 
    "13n": "‚ùÑÔ∏è", 
    "50d": "üå´Ô∏è", 
    "50n": "üå´Ô∏è"  
};

const fetchWeather = async (city) => {
    if (!city) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.');
        return;
    }

    try {
        const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=ru&appid=${apiKey}`;
        const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&lang=ru&appid=${apiKey}`;
        const [weatherResponse, forecastResponse] = await Promise.all([
            fetch(weatherUrl),
            fetch(forecastUrl)
        ]);

        if (!weatherResponse.ok || !forecastResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞: ${weatherResponse.status} ${weatherResponse.statusText}`);
        }

        const weatherData = await weatherResponse.json();
        const forecastData = await forecastResponse.json();
        displayWeather(weatherData, city);
        displayForecast(forecastData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
};

const displayWeather = (data, city) => {
    const { main, weather } = data;
    const temp = main.temp;
    const feelsLike = main.feels_like;
    const condition = weather[0].description;
    const icon = weather[0].icon;
    const weatherEmoji = weatherEmojiMap[icon] || "‚ùì";

    updateElement(currentTempElement, `${Math.round(temp)}¬∞C ${weatherEmoji}`);
    updateElement(currentFeelsLikeElement, `–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${Math.round(feelsLike)}¬∞C`);
    updateElement(currentConditionElement, capitalizeFirstLetter(condition));

    toggleDisplay('.input-container', false);
    updateElement(locationElement, city);
    toggleVisibility(returnBtn, true);

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    document.querySelector('.current-weather').classList.remove('hidden');
    document.querySelector('.current-weather').classList.add('visible');
    document.querySelector('.farmer-tips').classList.remove('hidden');
    document.querySelector('.farmer-tips').classList.add('visible');
    document.querySelector('.daily-forecast').classList.remove('hidden');
    document.querySelector('.daily-forecast').classList.add('visible');
    document.querySelector('footer').classList.remove('hidden');
    document.querySelector('footer').classList.add('visible');

    updateFarmerTips(temp, condition, main.humidity, main.pressure, weather[0].main);
};
const displayForecast = (data) => {
    const days = ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"];
    const forecastPerDay = {};

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    dailyForecastContainer.innerHTML = '';

const displayForecast = (data) => {
    const days = ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"];
    const forecastList = {};

    dailyForecastContainer.innerHTML = '';

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º—É —Å–ø–∏—Å–∫—É –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    data.list.forEach(item => {
        const date = new Date(item.dt * 1000);
        const dayIndex = date.getDay();
        const day = days[dayIndex];
        const tempMin = item.main.temp_min;
        const tempMax = item.main.temp_max;
        const condition = item.weather[0].description;
        const icon = item.weather[0].icon;
        const weatherEmoji = weatherEmojiMap[icon] || "‚ùì";

        forecastList[dayIndex] = `
            <div class="day">
                <p>${day}</p>
                <p>${Math.round(tempMax)}¬∞C / ${Math.round(tempMin)}¬∞C</p>
                <p>${weatherEmoji}</p>
                <p>${capitalizeFirstLetter(condition)}</p>
            </div>
        `;
    });

    const today = new Date().getDay(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –∏ –¥–∞–ª–µ–µ
    for (let i = 0; i < 7; i++) {
        const dayIndex = (today + i) % 7;
        dailyForecastContainer.innerHTML += forecastList[dayIndex] || `
            <div class="day">
                <p>${days[dayIndex]}</p>
                <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>
            </div>
        `;
    }
};


const updateFarmerTips = (temp, condition, humidity, pressure, weatherMain) => {
    let tip = '';

    if (weatherMain === 'Rain' || weatherMain === 'Drizzle') {
        tip = `–î–æ–∂–¥–ª–∏–≤–æ (${temp}¬∞C). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥—Ä–µ–Ω–∞–∂ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ.`;
    } else if (weatherMain === 'Clear') {
        if (temp > 30) {
            tip = `–°–æ–ª–Ω–µ—á–Ω–æ –∏ –∂–∞—Ä–∫–æ (${temp}¬∞C). –û–±–µ—Å–ø–µ—á—å—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ø–æ–ª–∏–≤ —Ä–∞—Å—Ç–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ—Å—ã—Ö–∞–Ω–∏—è.`;
        } else if (temp < 10) {
            tip = `–°–æ–ª–Ω–µ—á–Ω–æ, –Ω–æ —Ö–æ–ª–æ–¥–Ω–æ (${temp}¬∞C). –ó–∞—â–∏—Ç–∏—Ç–µ –º–æ–ª–æ–¥—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–º–æ—Ä–æ–∑–∫–æ–≤.`;
        } else {
            tip = `–°–æ–ª–Ω–µ—á–Ω–æ (${temp}¬∞C). –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –ø–æ–ª–µ–≤—ã—Ö —Ä–∞–±–æ—Ç.`;
        }
    } else if (weatherMain === 'Clouds') {
        tip = `–û–±–ª–∞—á–Ω–æ (${temp}¬∞C). –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –∏ –ø–µ—Ä–µ—Å–∞–¥–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π.`;
    } else if (weatherMain === 'Snow') {
        tip = `–°–Ω–µ–≥–æ–ø–∞–¥ (${temp}¬∞C). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–ø–ª–∏—Ü—ã –∏ —É–∫—Ä—ã—Ç–∏—è –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π.`;
    } else if (weatherMain === 'Thunderstorm') {
        tip = `–ì—Ä–æ–∑–∞ (${temp}¬∞C). –û–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–∞–±–æ—Ç—ã –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª—è—Ö.`;
    } else if (weatherMain === 'Mist' || weatherMain === 'Fog') {
        tip = `–¢—É–º–∞–Ω (${temp}¬∞C). –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç—å—é –ø–æ—á–≤—ã –∏ –≤–æ–∑–¥—É—Ö–∞.`;
    } else {
        tip = `–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ (${temp}¬∞C). –†–∞–±–æ—Ç—ã –Ω–∞ –ø–æ–ª—è—Ö –º–æ–≥—É—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.`;
    }

    if (humidity > 80) {
        tip += ' –í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—é –≥—Ä–∏–±–∫–æ–≤—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.';
    }

    if (pressure < 1000) {
        tip += ' –ù–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω—ã –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è –≤ –æ–ø—ã–ª–µ–Ω–∏–∏.';
    }

    updateElement(farmerTipsContainer, `<p class="tip">${tip}</p>`);
};

themeToggle.addEventListener('click', () => {
    isDarkTheme = !isDarkTheme;
    document.body.classList.toggle('dark-theme', isDarkTheme);
    themeToggle.textContent = isDarkTheme ? '‚òÄÔ∏è' : 'üåô';
});

getWeatherBtn.addEventListener('click', () => {
    const city = cityInput.value.trim();
    fetchWeather(city);
});

returnBtn.addEventListener('click', () => {
    toggleDisplay('.input-container', true);
    toggleVisibility(returnBtn, false);
    updateElement(locationElement, 'WeatherNow');
    updateElement(currentTempElement, '--¬∞C');
    updateElement(currentFeelsLikeElement, '–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ --¬∞C');
    updateElement(currentConditionElement, '–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è');
    dailyForecastContainer.innerHTML = '';
    farmerTipsContainer.innerHTML = '';
    cityInput.value = '';

    // –°–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ
    document.querySelector('.current-weather').classList.remove('visible');
    document.querySelector('.current-weather').classList.add('hidden');
    document.querySelector('.farmer-tips').classList.remove('visible');
    document.querySelector('.farmer-tips').classList.add('hidden');
    document.querySelector('.daily-forecast').classList.remove('visible');
    document.querySelector('.daily-forecast').classList.add('hidden');
    document.querySelector('footer').classList.remove('visible');
    document.querySelector('footer').classList.add('hidden');

    // –ü–ª–∞–≤–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    appContainer.style.maxHeight = '200px';
});

const updateElement = (element, content) => {
    element.style.opacity = 0;
    setTimeout(() => {
        element.innerHTML = content;
        element.style.opacity = 1;
    }, 300);
};

const toggleDisplay = (selector, show) => {
    const element = document.querySelector(selector);
    element.style.display = show ? 'flex' : 'none';
};

const toggleVisibility = (element, visible) => {
    element.classList.toggle('hidden', !visible);
    element.classList.toggle('visible', visible);

    // –ü–ª–∞–≤–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if (visible) {
        appContainer.style.maxHeight = '1000px'; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
    } else {
        appContainer.style.maxHeight = '200px';
    }
};

const capitalizeFirstLetter = (string) => {
    return string.charAt(0).toUpperCase() + string.slice(1);
};
