const cityInput = document.getElementById('cityInput');
const getWeatherBtn = document.getElementById('getWeatherBtn');
const locationElement = document.getElementById('location');
const currentTempElement = document.getElementById('current-temp');
const currentFeelsLikeElement = document.getElementById('current-feels-like');
const currentConditionElement = document.getElementById('current-condition');
const themeToggle = document.getElementById('themeToggle');
const returnBtn = document.getElementById('returnBtn');
const dailyForecastContainer = document.querySelector('.daily');
const farmerTipsContainer = document.querySelector('#farmer-tips-content');
const errorMessage = document.createElement('p'); // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
errorMessage.classList.add('error-message');
const spinner = document.getElementById('spinner'); // –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏–Ω–Ω–µ—Ä–∞
let isDarkTheme = false;
let farmerTips = {}; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫

const apiKey = 'c708426913319b328c4ff4719583d1c6';

const weatherEmojiMap = {
    "01d": "‚òÄÔ∏è", 
    "01n": "üåï", 
    "02d": "‚õÖ", 
    "02n": "üå•Ô∏è", 
    "03d": "‚òÅÔ∏è", 
    "03n": "‚òÅÔ∏è", 
    "04d": "‚òÅÔ∏è", 
    "04n": "‚òÅÔ∏è", 
    "09d": "üå¶Ô∏è", 
    "09n": "üå¶Ô∏è", 
    "10d": "üåßÔ∏è", 
    "10n": "üåßÔ∏è", 
    "11d": "‚õàÔ∏è", 
    "11n": "‚õàÔ∏è", 
    "13d": "‚ùÑÔ∏è", 
    "13n": "‚ùÑÔ∏è", 
    "50d": "üå´Ô∏è", 
    "50n": "üå´Ô∏è"
};

const fetchWeather = async (city) => {
    if (!city) {
        displayErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.');
        return;
    }

    spinner.classList.remove('hidden'); // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä

    try {
        const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=ru&appid=${apiKey}`;
        const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&lang=ru&appid=${apiKey}`;
        const weatherResponse = await fetch(weatherUrl);
        const forecastResponse = await fetch(forecastUrl);

        if (!weatherResponse.ok || !forecastResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞: ${weatherResponse.status} ${weatherResponse.statusText}`);
        }

        const weatherData = await weatherResponse.json();
        const forecastData = await forecastResponse.json();
        clearErrorMessage();
        displayWeather(weatherData, city);
        displayForecast(forecastData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        displayErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        if (error.message.includes('Failed to fetch')) {
            displayErrorMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    } finally {
        spinner.classList.add('hidden'); // –°–∫—Ä—ã—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä
    }
};

const displayWeather = (data, city) => {
    const { main, weather } = data;
    const temp = main.temp;
    const feelsLike = main.feels_like;
    const condition = weather[0].description;
    const icon = weather[0].icon;
    const weatherEmoji = weatherEmojiMap[icon] || "‚ùì";

    currentTempElement.textContent = `${Math.round(temp)}¬∞C ${weatherEmoji}`;
    currentFeelsLikeElement.textContent = `–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${Math.round(feelsLike)}¬∞C`;
    currentConditionElement.textContent = condition.charAt(0).toUpperCase() + condition.slice(1);
        if (temp > 30) {
            tip = farmerTips.clear_hot;
        } else if (temp < 10) {
            tip = farmerTips.clear_cold;
        } else {
            tip = farmerTips.clear_mild;
        }
    } else if (weatherMain === 'Clouds') {
        tip = farmerTips.clouds;
    } else if (weatherMain === 'Snow') {
        tip = farmerTips.snow;
    } else if (weatherMain === 'Thunderstorm') {
        tip = farmerTips.thunderstorm;
    } else if (weatherMain === 'Mist' || weatherMain === 'Fog') {
        tip = farmerTips.mist_fog;
    } else {
        tip = farmerTips.stable;
    }

    if (humidity > 80) {
        tip += ' ' + farmerTips.high_humidity;
    }

    if (pressure < 1000) {
        tip += ' ' + farmerTips.low_pressure;
    }

    farmerTipsContainer.style.opacity = 0; // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    setTimeout(() => {
        farmerTipsContainer.innerHTML = `<p class="tip">${tip}</p>`;
        farmerTipsContainer.style.opacity = 1; // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
    }, 300);
};

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
const displayErrorMessage = (message) => {
    errorMessage.textContent = message;
    cityInput.parentNode.appendChild(errorMessage);
};
// –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
const clearErrorMessage = () => {
    if (errorMessage.parentNode) {
        errorMessage.parentNode.removeChild(errorMessage);
    }
};

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–π –∏ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
themeToggle.addEventListener('click', () => {
    isDarkTheme = !isDarkTheme;
    document.body.classList.toggle('dark-theme', isDarkTheme);
    themeToggle.textContent = isDarkTheme ? '‚òÄÔ∏è' : 'üåô';
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É"
getWeatherBtn.addEventListener('click', () => {
    const city = cityInput.value.trim();
    fetchWeather(city);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
returnBtn.addEventListener('click', () => {
    document.querySelector('.input-container').style.display = 'flex';
    returnBtn.classList.add('hidden');
    locationElement.textContent = 'WeatherNow';
    currentTempElement.textContent = '--¬∞C';
    currentFeelsLikeElement.textContent = '–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ --¬∞C';
    currentConditionElement.textContent = '–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
    dailyForecastContainer.innerHTML = '';
    farmerTipsContainer.innerHTML = '';
    cityInput.value = '';
    clearErrorMessage();
});
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
document.addEventListener('DOMContentLoaded', async () => {
    const logoContainer = document.getElementById('logo-container');
    const appContainer = document.querySelector('.app-container');

    try {
        const response = await fetch('farmer-tips.json');
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status} ${response.statusText}`);
        }
        farmerTips = await response.json(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log('–ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', farmerTips);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤:', error);
        displayErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤.');
    }

    console.log('–°—Ç–∞—Ä—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞');
    logoContainer.addEventListener('animationend', () => {
        console.log('–ê–Ω–∏–º–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        setTimeout(() => {
            logoContainer.classList.add('hidden');
            appContainer.classList.remove('hidden');
            appContainer.style.opacity = 1; // –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º –ª–æ–≥–æ—Ç–∏–ø–∞
    });
});









