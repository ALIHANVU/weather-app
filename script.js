const API_KEY = 'c708426913319b328c4ff4719583d1c6';
const BASE_URL = 'https://api.openweathermap.org';

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    citySearch: document.querySelector('#citySearch'),
    searchButton: document.querySelector('#searchButton'),
    weatherResult: document.querySelector('#weatherResult'),
    temperature: document.querySelector('#temperature'),
    cityName: document.querySelector('#cityName'),
    weatherDescription: document.querySelector('#weatherDescription'),
    feelsLike: document.querySelector('#feelsLike'),
    maxTemp: document.querySelector('#maxTemp'),
    minTemp: document.querySelector('#minTemp'),
    humidity: document.querySelector('#humidity'),
    windSpeed: document.querySelector('#windSpeed'),
    visibility: document.querySelector('#visibility'),
    forecastDays: document.querySelector('#forecastDays'),
    tipsContainer: document.querySelector('#tipsContainer')
};

// –ò–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
const weatherEmoji = {
    "01d": "‚òÄÔ∏è", "01n": "üåô",
    "02d": "‚õÖ", "02n": "‚òÅÔ∏è",
    "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è",
    "04d": "‚òÅÔ∏è", "04n": "‚òÅÔ∏è",
    "09d": "üåßÔ∏è", "09n": "üåßÔ∏è",
    "10d": "üå¶Ô∏è", "10n": "üåßÔ∏è",
    "11d": "‚õàÔ∏è", "11n": "‚õàÔ∏è",
    "13d": "üå®Ô∏è", "13n": "üå®Ô∏è",
    "50d": "üå´Ô∏è", "50n": "üå´Ô∏è"
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤
async function loadFarmerTips() {
    try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–≤–µ—Ç–æ–≤...');
        const response = await fetch('farmer-tips.json');
        
        console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('–°–æ–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
        return data;
    } catch (error) {
        console.error('–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–≤–µ—Ç–æ–≤:', error);
        return null;
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(timestamp) {
    return new Date(timestamp * 1000).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
    });
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
function getCurrentSeason() {
    const month = new Date().getMonth();
    if (month >= 2 && month <= 4) return 'spring';
    if (month >= 5 && month <= 7) return 'summer';
    if (month >= 8 && month <= 10) return 'autumn';
    return 'winter';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function getUserLocation() {
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            reject(new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'));
            return;
        }

        const options = {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 0
        };

        navigator.geolocation.getCurrentPosition(
            async (position) => {
                try {
                    const { latitude, longitude } = position.coords;
                    const response = await fetch(
                        `${BASE_URL}/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&limit=1&appid=${API_KEY}`
                    );
                    const data = await response.json();
                    if (data.length > 0) {
                        resolve(data[0].name);
                    } else {
                        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥'));
                    }
                } catch (error) {
                    reject(error);
                }
            },
            (error) => {
                let errorMessage;
                switch(error.code) {
                    case error.PERMISSION_DENIED:
                        errorMessage = "–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω";
                        break;
                    case error.POSITION_UNAVAILABLE:
                        errorMessage = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
                        break;
                    case error.TIMEOUT:
                        errorMessage = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è";
                        break;
                    default:
                        errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                }
                reject(new Error(errorMessage));
            },
            options
        );
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
async function fetchWeatherData(city) {
    try {
        const geoUrl = `${BASE_URL}/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`;
        const geoResponse = await fetch(geoUrl);
        const geoData = await geoResponse.json();

        if (!geoData.length) {
            throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const { lat, lon } = geoData[0];

        const [weather, forecast] = await Promise.all([
            fetch(`${BASE_URL}/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`),
            fetch(`${BASE_URL}/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`)
        ]).then(responses => Promise.all(responses.map(res => res.json())));

        return { weather, forecast };
    } catch (error) {
        showError(error.message);
        throw error;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
function updateBackground(weatherIcon) {
    const backgroundType = weatherBackgrounds[weatherIcon] || 'clear';
    console.log('–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:', weatherIcon);
    console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ–Ω:', backgroundType);
    console.log('–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã body:', document.body.className);
    document.body.className = `weather-bg ${backgroundType}`;
    console.log('–ù–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã body:', document.body.className);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª—å
    document.body.style.backgroundImage = `url('images/${backgroundType}.jpg')`;
    console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ–Ω:', `url('images/${backgroundType}.jpg')`);
}
function preloadImage(url) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.src = url;
        img.onload = () => {
            console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', url);
            resolve(url);
        };
        img.onerror = () => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', url);
            reject(url);
        };
    });
}

async function updateBackground(weatherIcon) {
    const backgroundType = weatherBackgrounds[weatherIcon] || 'clear';
    console.log('–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:', weatherIcon);
    console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ–Ω:', backgroundType);
    
    try {
        await preloadImage(`images/${backgroundType}.jpg`);
        document.body.className = `weather-bg ${backgroundType}`;
        document.body.style.backgroundImage = `url('images/${backgroundType}.jpg')`;
    } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', error);
        // –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ö–æ—Ç—è –±—ã —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
        document.body.className = `weather-bg ${backgroundType}`;
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤
async function generateFarmerTips(weatherData) {
    const tips = await loadFarmerTips();
    if (!tips) return [];

    const result = [];
    const temp = weatherData.main.temp;
    const humidity = weatherData.main.humidity;

    // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    if (temp >= 25) result.push(...tips.temperature.hot.tips);
    else if (temp >= 15) result.push(...tips.temperature.moderate.tips);
    else result.push(...tips.temperature.cold.tips);

    // –°–æ–≤–µ—Ç—ã –ø–æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    if (humidity >= 70) result.push(...tips.humidity.high.tips);
    else if (humidity >= 40) result.push(...tips.humidity.normal.tips);
    else result.push(...tips.humidity.low.tips);

    // –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    result.push(...tips.seasons[getCurrentSeason()].tips);

    return [...new Set(result)].slice(0, 5);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
function updateCurrentWeather(data) {
    const { main, weather, name, visibility, wind } = data;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω
    updateBackground(weather[0].icon);
    
    elements.cityName.textContent = name;
    elements.temperature.textContent = `${Math.round(main.temp)}¬∞`;
    elements.weatherDescription.textContent = weather[0].description.charAt(0).toUpperCase() + 
                                            weather[0].description.slice(1);
    elements.feelsLike.textContent = `${Math.round(main.feels_like)}¬∞`;
    elements.maxTemp.textContent = Math.round(main.temp_max);
    elements.minTemp.textContent = Math.round(main.temp_min);
    elements.humidity.textContent = `${main.humidity}%`;
    elements.windSpeed.textContent = `${wind.speed.toFixed(1)} –º/—Å`;
    elements.visibility.textContent = `${(visibility / 1000).toFixed(1)} –∫–º`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
function updateHourlyForecast(forecast) {
    elements.forecastDays.innerHTML = '';
    
    forecast.list.slice(0, 24).forEach((item, index) => {
        const hourlyDiv = document.createElement('div');
        hourlyDiv.className = 'forecast-hour';
        hourlyDiv.style.animationDelay = `${index * 0.1}s`;
        
        hourlyDiv.innerHTML = `
            <div class="forecast-time">${index === 0 ? '–°–µ–π—á–∞—Å' : formatTime(item.dt)}</div>
            <div class="forecast-icon">${weatherEmoji[item.weather[0].icon]}</div>
            <div class="forecast-temp">${Math.round(item.main.temp)}¬∞</div>
        `;
        
        elements.forecastDays.appendChild(hourlyDiv);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤
async function updateFarmerTips(weatherData) {
    const tips = await generateFarmerTips(weatherData);
    elements.tipsContainer.innerHTML = '';
    
    tips.forEach((tip, index) => {
        const tipElement = document.createElement('div');
        tipElement.className = 'tip-item';
        tipElement.style.animationDelay = `${index * 0.1}s`;
        
        tipElement.innerHTML = `
            <span class="tip-icon">üå±</span>
            <span class="tip-text">${tip}</span>
        `;
        
        elements.tipsContainer.appendChild(tipElement);
    });
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–æ–∫
function showError(message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-notification';
    errorDiv.textContent = message;
    document.body.appendChild(errorDiv);
    
    setTimeout(() => errorDiv.remove(), 3000);
}

// –ò–Ω–¥–∏–∫–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
function showLoading() {
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading-overlay';
    loadingDiv.innerHTML = `
        <div class="loading-spinner">
            <div class="loading-text">–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...</div>
        </div>
    `;
    document.body.appendChild(loadingDiv);
}

function hideLoading() {
    const loadingDiv = document.querySelector('.loading-overlay');
    if (loadingDiv) {
        loadingDiv.remove();
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
async function updateWeather(city) {
    try {
        elements.weatherResult.classList.add('loading');
        const data = await fetchWeatherData(city);
        
        updateCurrentWeather(data.weather);
        updateHourlyForecast(data.forecast);
        await updateFarmerTips(data.weather);
        
        elements.weatherResult.classList.remove('hidden');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
    } finally {
        elements.weatherResult.classList.remove('loading');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
let searchTimeout;

elements.searchButton.addEventListener('click', () => {
    const searchValue = elements.citySearch.value.trim();
    if (searchValue) {
        updateWeather(searchValue);
    }
});

elements.citySearch.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        const searchValue = e.target.value.trim();
        if (searchValue) {
            clearTimeout(searchTimeout);
            updateWeather(searchValue);
        }
    }
});

elements.citySearch.addEventListener('input', (e) => {
    clearTimeout(searchTimeout);
    searchTimeout = setTimeout(() => {
        const searchValue = e.target.value.trim();
        if (searchValue.length >= 2) {
            updateWeather(searchValue);
        }
    }, 500);
});

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ–≥–æ–¥—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–æ–Ω–æ–≤
const weatherBackgrounds = {
    '01d': 'clear', // —è—Å–Ω–æ –¥–Ω–µ–º
    '01n': 'clear', // —è—Å–Ω–æ –Ω–æ—á—å—é
    '02d': 'clouds', // –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ –¥–Ω–µ–º
    '02n': 'clouds', // –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ –Ω–æ—á—å—é
    '03d': 'clouds', // –æ–±–ª–∞—á–Ω–æ
    '03n': 'clouds',
    '04d': 'clouds', // –ø–∞—Å–º—É—Ä–Ω–æ
    '04n': 'clouds',
    '09d': 'rain', // –¥–æ–∂–¥—å
    '09n': 'rain',
    '10d': 'rain', // —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
    '10n': 'rain',
    '11d': 'thunderstorm', // –≥—Ä–æ–∑–∞
    '11n': 'thunderstorm',
    '13d': 'snow', // —Å–Ω–µ–≥
    '13n': 'snow',
    '50d': 'fog', // —Ç—É–º–∞–Ω
    '50n': 'fog'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', async () => {
    try {
        showLoading();
        const city = await getUserLocation();
        await updateWeather(city);
    } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error.message);
        await updateWeather('–ú–æ—Å–∫–≤–∞');
    } finally {
        hideLoading();
    }
});
