const themeToggle = document.getElementById('themeToggle');
const returnBtn = document.getElementById('returnBtn');
const dailyForecastContainer = document.querySelector('.daily');
const farmerTipsContainer = document.querySelector('#farmer-tips-content');
const farmerTipsContainer = document.getElementById('farmer-tips-content');
let isDarkTheme = false;
const apiKey = 'c708426913319b328c4ff4719583d1c6';

const apiKey = 'c708426913319b328c4ff4719583d1c6';
const weatherEmojiMap = {
    "01d": "‚òÄÔ∏è", "01n": "üåï", 
    "02d": "‚õÖ", "02n": "üå•Ô∏è",
    "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è",
    "04d": "‚òÅÔ∏è", "04n": "‚òÅÔ∏è",
    "09d": "üå¶Ô∏è", "09n": "üå¶Ô∏è",
    "10d": "üåßÔ∏è", "10n": "üåßÔ∏è",
    "11d": "‚õàÔ∏è", "11n": "‚õàÔ∏è",
    "13d": "‚ùÑÔ∏è", "13n": "‚ùÑÔ∏è",
    "01d": "‚òÄÔ∏è", "01n": "üåï", "02d": "‚õÖ", "02n": "üå•Ô∏è",
    "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è", "04d": "‚òÅÔ∏è", "04n": "‚òÅÔ∏è",
    "09d": "üå¶Ô∏è", "09n": "üå¶Ô∏è", "10d": "üåßÔ∏è", "10n": "üåßÔ∏è",
    "11d": "‚õàÔ∏è", "11n": "‚õàÔ∏è", "13d": "‚ùÑÔ∏è", "13n": "‚ùÑÔ∏è",
    "50d": "üå´Ô∏è", "50n": "üå´Ô∏è"
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
themeToggle.addEventListener('click', toggleTheme);
getWeatherBtn.addEventListener('click', handleWeatherFetch);
returnBtn.addEventListener('click', resetApp);
cityInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') handleWeatherFetch();
document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('weatherInfo').classList.add('hidden');
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
function toggleTheme() {
    isDarkTheme = !isDarkTheme;
    document.body.classList.toggle('dark-theme', isDarkTheme);
    themeToggle.textContent = isDarkTheme ? '‚òÄÔ∏è' : 'üåô';
}
// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
async function fetchWeather(city) {
const fetchWeather = async (city) => {
    if (!city) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.');
        return;
@@ -50,27 +33,23 @@ async function fetchWeather(city) {
        const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=ru&appid=${apiKey}`;
        const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&lang=ru&appid=${apiKey}`;

        const [weatherResponse, forecastResponse] = await Promise.all([
            fetch(weatherUrl),
            fetch(forecastUrl)
        ]);
        const weatherResponse = await fetch(weatherUrl);
        const forecastResponse = await fetch(forecastUrl);

        if (!weatherResponse.ok || !forecastResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞: ${weatherResponse.statusText || forecastResponse.statusText}`);
            throw new Error(`–û—à–∏–±–∫–∞: ${weatherResponse.status}`);
        }

        const weatherData = await weatherResponse.json();
        const forecastData = await forecastResponse.json();
        displayWeather(weatherData, city);
        displayForecast(forecastData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}
};

function displayWeather(data, city) {
const displayWeather = (data, city) => {
    const { temp, feels_like: feelsLike } = data.main;
    const condition = data.weather[0].description;
    const icon = data.weather[0].icon;
@@ -81,79 +60,62 @@ function displayWeather(data, city) {
    currentConditionElement.textContent = capitalize(condition);
    locationElement.textContent = city;

    document.querySelector('.input-container').style.display = 'none';
    document.querySelector('.input-container').classList.add('hidden');
    document.getElementById('weatherInfo').classList.remove('hidden');
    returnBtn.classList.remove('hidden');
};

    updateFarmerTips(temp, condition, data.main.humidity, data.main.pressure, data.weather[0].main);
}
function displayForecast(data) {
const displayForecast = (data) => {
    const days = ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"];
    const uniqueDays = {};
    dailyForecastContainer.innerHTML = '';

    data.list.forEach(item => {
    const forecastList = data.list.filter((item) => {
        const date = new Date(item.dt * 1000);
        const dayIndex = date.getDay();
        if (!uniqueDays[dayIndex]) {
            uniqueDays[dayIndex] = true;
            const day = days[dayIndex];
            const { temp_min: tempMin, temp_max: tempMax } = item.main;
            const condition = item.weather[0].description;
            const icon = item.weather[0].icon;
            const weatherEmoji = weatherEmojiMap[icon] || "‚ùì";
            dailyForecastContainer.innerHTML += `
                <div class="day">
                    <p>${day}</p>
                    <p>${Math.round(tempMax)}¬∞C / ${Math.round(tempMin)}¬∞C</p>
                    <p>${weatherEmoji}</p>
                    <p>${capitalize(condition)}</p>
                </div>
            `;
        if (!uniqueDays[date.getDay()]) {
            uniqueDays[date.getDay()] = true;
            return true;
        }
        return false;
    });
}
function updateFarmerTips(temp, condition, humidity, pressure, weatherMain) {
    let tip = '';
    if (weatherMain === 'Rain' || weatherMain === 'Drizzle') {
        tip = `–î–æ–∂–¥–ª–∏–≤–æ (${temp}¬∞C). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π.`;
    } else if (weatherMain === 'Clear') {
        tip = temp > 30
            ? `–°–æ–ª–Ω–µ—á–Ω–æ –∏ –∂–∞—Ä–∫–æ (${temp}¬∞C). –ü–æ–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è.`
            : `–°–æ–ª–Ω–µ—á–Ω–æ (${temp}¬∞C). –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã.`;
    } else if (weatherMain === 'Snow') {
        tip = `–°–Ω–µ–≥–æ–ø–∞–¥ (${temp}¬∞C). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫—Ä—ã—Ç–∏—è.`;
    } else {
        tip = `–£—Å–ª–æ–≤–∏—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ (${temp}¬∞C). –†–∞–±–æ—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è.`;
    }

    if (humidity > 80) tip += ' –í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: —Ä–∏—Å–∫ –≥—Ä–∏–±–∫–æ–≤.';
    if (pressure < 1000) tip += ' –ù–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø—ã–ª–µ–Ω–∏–µ–º.';
    dailyForecastContainer.innerHTML = '';
    forecastList.forEach((item) => {
        const date = new Date(item.dt * 1000);
        const day = days[date.getDay()];
        const tempMax = item.main.temp_max;
        const tempMin = item.main.temp_min;
        const icon = item.weather[0].icon;
        const weatherEmoji = weatherEmojiMap[icon] || "‚ùì";
        dailyForecastContainer.innerHTML += `
            <div class="day">
                <p>${day}</p>
                <p>${Math.round(tempMax)}¬∞C / ${Math.round(tempMin)}¬∞C</p>
                <p>${weatherEmoji}</p>
            </div>
        `;
    });
};

    farmerTipsContainer.innerHTML = `<p class="tip">${tip}</p>`;
}
const capitalize = (text) => text.charAt(0).toUpperCase() + text.slice(1);

function resetApp() {
    document.querySelector('.input-container').style.display = 'flex';
getWeatherBtn.addEventListener('click', () => {
    fetchWeather(cityInput.value.trim());
});
returnBtn.addEventListener('click', () => {
    document.querySelector('.input-container').classList.remove('hidden');
    document.getElementById('weatherInfo').classList.add('hidden');
    returnBtn.classList.add('hidden');
    locationElement.textContent = 'WeatherNow';
    cityInput.value = '';
    currentTempElement.textContent = '--¬∞C';
    currentFeelsLikeElement.textContent = '–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ --¬∞C';
    currentConditionElement.textContent = '–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
    dailyForecastContainer.innerHTML = '';
    farmerTipsContainer.innerHTML = '';
    cityInput.value = '';
}
function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
});

function handleWeatherFetch() {
    const city = cityInput.value.trim();
    if (city) fetchWeather(city);
}
themeToggle.addEventListener('click', () => {
    isDarkTheme = !isDarkTheme;
    document.body.classList.toggle('dark-theme', isDarkTheme);
    themeToggle.textContent = isDarkTheme ? '‚òÄÔ∏è' : 'üåô';
});
