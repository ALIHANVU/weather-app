/**
 * –ü–æ–≥–æ–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
 * 1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–∫—Ä—ã—Ç—ã—Ö –æ—à–∏–±–æ–∫
 * 2. –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –µ–¥–∏–Ω–æ–π —Ç–æ—á–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è
 * 3. –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Ç–∞–π–º–∞—É—Ç—ã –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
 * 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
 * 5. –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
 * 6. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
 * 7. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞
 */

'use strict';

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ =====
const API_KEY = 'c708426913319b328c4ff4719583d1c6';
const BASE_URL = 'https://api.openweathermap.org';
const DEFAULT_CITY = '–ì—Ä–æ–∑–Ω—ã–π';
const CACHE_EXPIRATION = 60 * 60 * 1000; // 1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
const CACHE_KEY = 'weatherData';
const LAST_CITY_KEY = 'lastLoadedCity';

// –¢–∞–π–º–∞—É—Ç—ã (–º—Å)
const TIMEOUTS = {
    API_REQUEST: 5000,          // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
    GEOLOCATION: 5000,          // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    IP_GEOLOCATION: 3000,       // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP
    WEATHER_LOADING: 8000,      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã
    LOADING_INDICATOR: 10000,   // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    EMERGENCY: 15000,           // –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    ANIMATION: 300              // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–π
};

// ===== –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ –ó–ê–í–ò–°–ê–ù–ò–Ø =====
(function setupEmergencyTimeout() {
    // –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    document.querySelectorAll('.loading-overlay').forEach(overlay => overlay.remove());
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
    if (window._loadingTimeout) {
        clearTimeout(window._loadingTimeout);
        window._loadingTimeout = null;
    }
    
    // –ê–≤–∞—Ä–∏–π–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
        const loadingOverlays = document.querySelectorAll('.loading-overlay');
        if (loadingOverlays.length > 0) {
            console.warn('–ê–í–ê–†–ò–ô–ù–û–ï –ü–†–ï–†–´–í–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò: —Å—Ä–∞–±–æ—Ç–∞–ª —Ç–∞–π–º–∞—É—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
            loadingOverlays.forEach(overlay => overlay.remove());
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
            const weatherResult = document.getElementById('weatherResult');
            if (weatherResult && weatherResult.classList.contains('hidden')) {
                weatherResult.classList.remove('hidden');
                displayEmergencyWeatherData();
            }
        }
    }, TIMEOUTS.EMERGENCY);
    
    // –ü–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è jQuery, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
    if (typeof $ === 'undefined') {
        window.$ = function() {
            return {
                ready: function(fn) { document.addEventListener('DOMContentLoaded', fn); return this; },
                on: function() { return this; },
                css: function() { return this; },
                html: function() { return this; },
                text: function() { return this; }
            };
        };
    }
})();

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –î–û–°–¢–£–ü–ê –ö DOM =====
function safeGetElement(id) {
    const element = document.getElementById(id);
    return element;
}

// ===== DOM –≠–õ–ï–ú–ï–ù–¢–´ =====
const elements = {
    get citySearch() { return safeGetElement('citySearch'); },
    get searchButton() { return safeGetElement('searchButton'); },
    get weatherResult() { return safeGetElement('weatherResult'); },
    get temperature() { return safeGetElement('temperature'); },
    get cityName() { return safeGetElement('cityName'); },
    get weatherDescription() { return safeGetElement('weatherDescription'); },
    get feelsLike() { return safeGetElement('feelsLike'); },
    get maxTemp() { return safeGetElement('maxTemp'); },
    get minTemp() { return safeGetElement('minTemp'); },
    get humidity() { return safeGetElement('humidity'); },
    get windSpeed() { return safeGetElement('windSpeed'); },
    get visibility() { return safeGetElement('visibility'); },
    get forecastDays() { return safeGetElement('forecastDays'); },
    get tipsContainer() { return safeGetElement('tipsContainer'); },
    get weeklyForecastContainer() { return safeGetElement('weeklyForecastContainer'); }
};

// –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
const modalElements = {
    get dayModal() { return safeGetElement('dayModal'); },
    get closeModal() { return safeGetElement('closeModal'); },
    get dayName() { return safeGetElement('modalDayName'); },
    get temperature() { return safeGetElement('modalTemperature'); },
    get weatherDescription() { return safeGetElement('modalWeatherDescription'); },
    get maxTemp() { return safeGetElement('modalMaxTemp'); },
    get minTemp() { return safeGetElement('modalMinTemp'); },
    get feelsLike() { return safeGetElement('modalFeelsLike'); },
    get humidity() { return safeGetElement('modalHumidity'); },
    get windSpeed() { return safeGetElement('modalWindSpeed'); },
    get visibility() { return safeGetElement('modalVisibility'); },
    get hourlyForecast() { return safeGetElement('modalHourlyForecast'); },
    get tipsContainer() { return safeGetElement('modalTipsContainer'); }
};

// –ò–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
const weatherEmoji = {
    "01d": "‚òÄÔ∏è", "01n": "üåô",
    "02d": "‚õÖ", "02n": "‚òÅÔ∏è",
    "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è",
    "04d": "‚òÅÔ∏è", "04n": "‚òÅÔ∏è",
    "09d": "üåßÔ∏è", "09n": "üåßÔ∏è",
    "10d": "üå¶Ô∏è", "10n": "üåßÔ∏è",
    "11d": "‚õàÔ∏è", "11n": "‚õàÔ∏è",
    "13d": "üå®Ô∏è", "13n": "üå®Ô∏è",
    "50d": "üå´Ô∏è", "50n": "üå´Ô∏è"
};

// ===== –†–ê–ë–û–¢–ê –° –õ–û–ö–ê–õ–¨–ù–´–ú –•–†–ê–ù–ò–õ–ò–©–ï–ú =====

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ –∫–µ—à
 * @param {string} city - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
 */
function cacheWeatherData(city, data) {
    try {
        if (!city || !data) return;
        
        localStorage.setItem(CACHE_KEY, JSON.stringify({
            city,
            data,
            timestamp: Date.now()
        }));
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à:', error);
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–∑ –∫–µ—à–∞
 * @returns {Object|null} –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ null
 */
function getCachedWeatherData() {
    try {
        const cached = localStorage.getItem(CACHE_KEY);
        if (!cached) return null;
        
        const parsedData = JSON.parse(cached);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if (Date.now() - parsedData.timestamp > CACHE_EXPIRATION) {
            localStorage.removeItem(CACHE_KEY);
            return null;
        }
        
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ú–æ—Å–∫–≤—É –∏–∑ –∫–µ—à–∞
        if (parsedData.city === '–ú–æ—Å–∫–≤–∞') {
            return null;
        }
        
        return parsedData;
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞:', error);
        return null;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
 * @returns {string|null} –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ null
 */
function getLastCity() {
    try {
        const lastCity = localStorage.getItem(LAST_CITY_KEY);
        if (!lastCity || lastCity === '–ú–æ—Å–∫–≤–∞') return null;
        return lastCity;
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≥–æ—Ä–æ–¥–∞:', error);
        return null;
    }
}

/**
 * –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 */
function cleanupStorage() {
    try {
        // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ú–æ—Å–∫–≤–µ
        const lastCity = localStorage.getItem(LAST_CITY_KEY);
        if (lastCity === '–ú–æ—Å–∫–≤–∞') {
            localStorage.removeItem(LAST_CITY_KEY);
            localStorage.removeItem(CACHE_KEY);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–µ—à–∞
        const cached = localStorage.getItem(CACHE_KEY);
        if (cached) {
            try {
                const parsedData = JSON.parse(cached);
                if (Date.now() - parsedData.timestamp > CACHE_EXPIRATION) {
                    localStorage.removeItem(CACHE_KEY);
                }
            } catch (e) {
                localStorage.removeItem(CACHE_KEY);
            }
        }
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
    }
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∏–∑ timestamp
 * @param {number} timestamp - Unix timestamp
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
 */
function formatTime(timestamp) {
    try {
        return new Date(timestamp * 1000).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        });
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', error);
        return '--:--';
    }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ timestamp
 * @param {number} timestamp - Unix timestamp
 * @returns {string} –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
 */
function getDayOfWeek(timestamp) {
    try {
        const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
        return days[new Date(timestamp * 1000).getDay()];
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏:', error);
        return '–î–µ–Ω—å';
    }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω
 * @returns {string} –°–µ–∑–æ–Ω (spring/summer/autumn/winter)
 */
function getCurrentSeason() {
    try {
        const month = new Date().getMonth();
        if (month >= 2 && month <= 4) return 'spring';
        if (month >= 5 && month <= 7) return 'summer';
        if (month >= 8 && month <= 10) return 'autumn';
        return 'winter';
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞:', error);
        return 'spring';
    }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç ripple –ø—Ä–∏ –∫–ª–∏–∫–µ
 * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
 */
function createRipple(event) {
    try {
        const target = event.currentTarget;
        if (!target) return;
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã ripple
        target.querySelectorAll('.ripple').forEach(ripple => ripple.remove());
        
        const ripple = document.createElement('span');
        const diameter = Math.max(target.clientWidth, target.clientHeight);
        const radius = diameter / 2;

        const rect = target.getBoundingClientRect();
        ripple.style.width = ripple.style.height = `${diameter}px`;
        ripple.style.left = `${event.clientX - rect.left - radius}px`;
        ripple.style.top = `${event.clientY - rect.top - radius}px`;
        ripple.className = 'ripple';

        target.appendChild(ripple);
        
        // –£–¥–∞–ª—è–µ–º ripple –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (ripple && ripple.parentNode === target) {
                target.removeChild(ripple);
            }
        }, 600);
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ripple —ç—Ñ—Ñ–µ–∫—Ç–∞:', error);
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function showError(message) {
    try {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        document.querySelectorAll('.error-notification').forEach(error => error.remove());
        
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-notification';
        errorDiv.textContent = message;
        document.body.appendChild(errorDiv);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => errorDiv.classList.add('show'), 10);
        
        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            errorDiv.classList.add('hide');
            setTimeout(() => errorDiv.remove(), TIMEOUTS.ANIMATION);
        }, 5000);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function showLoading(message = '–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...') {
    try {
        console.log('–ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', message);
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–≤–µ—Ä–ª–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
        hideLoading();
        
        // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –≤–∏–¥–Ω—ã
        const weatherResult = elements.weatherResult;
        if (weatherResult && !weatherResult.classList.contains('hidden')) {
            console.log('–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –≤–∏–¥–Ω—ã');
            return;
        }
        
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'loading-overlay';
        loadingDiv.id = 'loadingOverlay';
        loadingDiv.innerHTML = `
            <div class="loading-spinner">
                <div class="loading-text">${message}</div>
            </div>
        `;
        document.body.appendChild(loadingDiv);
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
        if (window._loadingTimeout) {
            clearTimeout(window._loadingTimeout);
        }
        
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        window._loadingTimeout = setTimeout(() => {
            console.warn('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
            hideLoading();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
            setTimeout(() => {
                const weatherResult = elements.weatherResult;
                if (weatherResult && weatherResult.classList.contains('hidden')) {
                    console.warn('–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏');
                    displayEmergencyWeatherData();
                }
            }, 500);
        }, TIMEOUTS.LOADING_INDICATOR);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    }
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
 */
function hideLoading() {
    try {
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        if (window._loadingTimeout) {
            clearTimeout(window._loadingTimeout);
            window._loadingTimeout = null;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–≤–µ—Ä–ª–µ–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        const loadingDivs = document.querySelectorAll('.loading-overlay');
        
        if (loadingDivs.length === 0) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∏ —É–¥–∞–ª—è–µ–º
        loadingDivs.forEach(div => {
            div.classList.add('fade-out');
            setTimeout(() => {
                if (div && div.parentNode) {
                    div.remove();
                }
            }, TIMEOUTS.ANIMATION);
        });
        
        // –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            document.querySelectorAll('.loading-overlay').forEach(div => div.remove());
        }, 1000);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —É–¥–∞–ª—è–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        try {
            document.querySelectorAll('.loading-overlay').forEach(div => div.remove());
        } catch (e) {}
    }
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–≤–∞—Ä–∏–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
 */
function displayEmergencyWeatherData() {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (elements.weatherResult) {
            elements.weatherResult.classList.remove('hidden');
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if (elements.cityName) elements.cityName.textContent = DEFAULT_CITY;
        if (elements.temperature) elements.temperature.textContent = '15¬∞';
        if (elements.weatherDescription) elements.weatherDescription.textContent = '–ü–æ–≥–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
        if (elements.feelsLike) elements.feelsLike.textContent = '14¬∞';
        if (elements.maxTemp) elements.maxTemp.textContent = '17';
        if (elements.minTemp) elements.minTemp.textContent = '13';
        if (elements.humidity) elements.humidity.textContent = '70%';
        if (elements.windSpeed) elements.windSpeed.textContent = '2.5 –º/—Å';
        if (elements.visibility) elements.visibility.textContent = '10.0 –∫–º';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        showFallbackWeather(DEFAULT_CITY);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ä–∏–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

// ===== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° API –ò –î–ê–ù–ù–´–ú–ò =====

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP-–∞–¥—Ä–µ—Å—É
 * @returns {Promise<string>} –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 */
async function getLocationByIP() {
    return new Promise((resolve) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AbortController –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
        const controller = new AbortController();
        const signal = controller.signal;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const timeoutId = setTimeout(() => {
            controller.abort();
            console.warn('–¢–∞–π–º–∞—É—Ç IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
            resolve(DEFAULT_CITY);
        }, TIMEOUTS.IP_GEOLOCATION);

        fetch('https://ipapi.co/json/', { signal })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP –æ—à–∏–±–∫–∞! —Å—Ç–∞—Ç—É—Å: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                clearTimeout(timeoutId);
                resolve(data.city || DEFAULT_CITY);
            })
            .catch(error => {
                clearTimeout(timeoutId);
                console.warn('–û—à–∏–±–∫–∞ IP-–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error.message);
                resolve(DEFAULT_CITY);
            });
    });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPS
 * @returns {Promise<string>} –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 */
function getUserLocation() {
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            reject(new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'));
            return;
        }

        const options = {
            enableHighAccuracy: false,
            timeout: TIMEOUTS.GEOLOCATION,
            maximumAge: 60000
        };

        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        const timeoutId = setTimeout(() => {
            reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏'));
        }, TIMEOUTS.GEOLOCATION + 1000);

        navigator.geolocation.getCurrentPosition(
            async (position) => {
                try {
                    clearTimeout(timeoutId);
                    const { latitude, longitude } = position.coords;
                    
                    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ API
                    const controller = new AbortController();
                    const signal = controller.signal;
                    
                    const apiTimeoutId = setTimeout(() => {
                        controller.abort();
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
                        resolve(`${DEFAULT_CITY}`);
                    }, TIMEOUTS.API_REQUEST / 2);
                    
                    try {
                        const response = await fetch(
                            `${BASE_URL}/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&limit=1&appid=${API_KEY}`,
                            { signal }
                        );
                        
                        clearTimeout(apiTimeoutId);
                        
                        if (!response.ok) {
                            throw new Error(`HTTP –æ—à–∏–±–∫–∞! —Å—Ç–∞—Ç—É—Å: ${response.status}`);
                        }
                        
                        const data = await response.json();
                        if (data.length > 0) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ú–æ—Å–∫–≤—É –µ—Å–ª–∏ –æ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å
                            if (data[0].name === '–ú–æ—Å–∫–≤–∞') {
                                resolve(DEFAULT_CITY);
                            } else {
                                resolve(data[0].name);
                            }
                        } else {
                            resolve(DEFAULT_CITY);
                        }
                    } catch (fetchError) {
                        clearTimeout(apiTimeoutId);
                        console.warn('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', fetchError.message);
                        resolve(DEFAULT_CITY);
                    }
                } catch (error) {
                    clearTimeout(timeoutId);
                    reject(error);
                }
            },
            (error) => {
                clearTimeout(timeoutId);
                reject(new Error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ' + error.message));
            },
            options
        );
    });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
 */
function checkGeolocationPermission() {
    return new Promise((resolve) => {
        if (!navigator.geolocation) {
            resolve({ state: 'unavailable' });
            return;
        }
        
        // –ï—Å–ª–∏ API —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if (!navigator.permissions || !navigator.permissions.query) {
            resolve({ state: 'unknown' });
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        const timeoutId = setTimeout(() => {
            resolve({ state: 'unknown' });
        }, 2000);
        
        navigator.permissions.query({ name: 'geolocation' })
            .then((permissionStatus) => {
                clearTimeout(timeoutId);
                resolve({ state: permissionStatus.state });
            })
            .catch(() => {
                clearTimeout(timeoutId);
                resolve({ state: 'unknown' });
            });
    });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ API
 * @param {string} city - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
 */
async function fetchWeatherData(city) {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        const cachedData = getCachedWeatherData();
        if (cachedData && cachedData.city === city) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è', city);
            return cachedData.data;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ
        let cityForApi = city;
        if (city === DEFAULT_CITY) {
            cityForApi = 'Grozny';
        } else if (city === '–ú–æ—Å–∫–≤–∞') {
            cityForApi = 'Moscow';
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        const controller = new AbortController();
        const signal = controller.signal;
        const timeoutId = setTimeout(() => controller.abort(), TIMEOUTS.API_REQUEST);
        
        const geoUrl = `${BASE_URL}/geo/1.0/direct?q=${encodeURIComponent(cityForApi)}&limit=1&appid=${API_KEY}`;
        const geoResponse = await fetch(geoUrl, { signal });
        
        if (!geoResponse.ok) {
            clearTimeout(timeoutId);
            throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ${geoResponse.status}`);
        }
        
        const geoData = await geoResponse.json();

        if (!geoData.length) {
            clearTimeout(timeoutId);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
            if (city === DEFAULT_CITY || cityForApi === 'Grozny') {
                return fetchWeatherByCoords(43.3168, 45.6981, city);
            } else if (city === '–ú–æ—Å–∫–≤–∞' || cityForApi === 'Moscow') {
                return fetchWeatherByCoords(55.7558, 37.6173, DEFAULT_CITY);
            }
            throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const { lat, lon } = geoData[0];
        clearTimeout(timeoutId);
        
        return fetchWeatherByCoords(lat, lon, city);
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:', error.message);
        
        // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        if (error.name === 'AbortError') {
            if (city === DEFAULT_CITY) {
                return fetchWeatherByCoords(43.3168, 45.6981, city);
            } else if (city === '–ú–æ—Å–∫–≤–∞') {
                return fetchWeatherByCoords(55.7558, 37.6173, DEFAULT_CITY);
            }
        }
        throw error;
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
 * @param {number} lat - –®–∏—Ä–æ—Ç–∞
 * @param {number} lon - –î–æ–ª–≥–æ—Ç–∞
 * @param {string} cityName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
 */
async function fetchWeatherByCoords(lat, lon, cityName) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AbortController –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–∞–π–º–∞—É—Ç–∞
        const controller = new AbortController();
        const signal = controller.signal;
        const timeoutId = setTimeout(() => controller.abort(), TIMEOUTS.API_REQUEST);
        
        const weatherUrl = `${BASE_URL}/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`;
        const forecastUrl = `${BASE_URL}/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        const [weatherResponse, forecastResponse] = await Promise.all([
            fetch(weatherUrl, { signal }),
            fetch(forecastUrl, { signal })
        ]);
        
        clearTimeout(timeoutId);
        
        if (!weatherResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã: ${weatherResponse.status}`);
        }
        
        if (!forecastResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: ${forecastResponse.status}`);
        }
        
        const weather = await weatherResponse.json();
        const forecast = await forecastResponse.json();
        
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (cityName === DEFAULT_CITY && weather.name !== DEFAULT_CITY) {
            weather.name = DEFAULT_CITY;
        } else if (cityName === '–ú–æ—Å–∫–≤–∞') {
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ú–æ—Å–∫–≤—É, –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            cityName = DEFAULT_CITY;
            weather.name = DEFAULT_CITY;
        }
        
        const result = { weather, forecast };
        
        // –ö–µ—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cacheWeatherData(cityName, result);
        
        return result;
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:', error.message);
        throw error;
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤
 * @returns {Promise<Object>} –°–æ–≤–µ—Ç—ã
 */
async function loadFarmerTips() {
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Å –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        const timestamp = new Date().getTime();
        const response = await Promise.race([
            fetch(`https://alihanvu.github.io/weather-app/farmer-tips.json?${timestamp}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Cache-Control': 'no-cache'
                }
            }),
            new Promise((_, reject) => setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–≤–µ—Ç–æ–≤')), TIMEOUTS.API_REQUEST))
        ]);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        return data;
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–≤–µ—Ç–æ–≤:', error.message);
        
        // –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        return {
            "temperature": {
                "hot": {
                    "tips": ["–ü–æ–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Ä–∞–Ω–æ —É—Ç—Ä–æ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º—É–ª—å—á—É –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤–ª–∞–≥–∏"]
                },
                "moderate": {
                    "tips": ["–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö"]
                },
                "cold": {
                    "tips": ["–ó–∞—â–∏—Ç–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç –∑–∞–º–æ—Ä–æ–∑–∫–æ–≤", "–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ–ª–∏–≤ –≤ —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É"]
                }
            },
            "humidity": {
                "high": {
                    "tips": ["–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –≥—Ä–∏–±–∫–æ–≤—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π", "–û–±–µ—Å–ø–µ—á—å—Ç–µ —Ö–æ—Ä–æ—à—É—é –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é —Ä–∞—Å—Ç–µ–Ω–∏–π"]
                },
                "normal": {
                    "tips": ["–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ–ª–∏–≤", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –ø–µ—Ä–µ–¥ –ø–æ–ª–∏–≤–æ–º"]
                },
                "low": {
                    "tips": ["–£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª–∏–≤–∞", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø–µ–ª—å–Ω–æ–≥–æ –æ—Ä–æ—à–µ–Ω–∏—è"]
                }
            },
            "seasons": {
                "spring": {
                    "tips": ["–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≥—Ä—è–¥–∫–∏ –∫ –ø–æ—Å–∞–¥–∫–µ", "–ù–∞—á–Ω–∏—Ç–µ –≤—ã—Å–∞–∂–∏–≤–∞—Ç—å —Ö–æ–ª–æ–¥–æ—Å—Ç–æ–π–∫–∏–µ –∫—É–ª—å—Ç—É—Ä—ã"]
                },
                "summer": {
                    "tips": ["–ó–∞—â–∏—Ç–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞", "–°–æ–±–∏—Ä–∞–π—Ç–µ —É—Ä–æ–∂–∞–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ"]
                },
                "autumn": {
                    "tips": ["–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å–∞–¥ –∫ –∑–∏–º–µ", "–í—Ä–µ–º—è –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –æ–∑–∏–º—ã—Ö –∫—É–ª—å—Ç—É—Ä"]
                },
                "winter": {
                    "tips": ["–ó–∞—â–∏—Ç–∏—Ç–µ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç –º–æ—Ä–æ–∑–∞", "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ—Å–∞–¥–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–∑–æ–Ω"]
                }
            }
        };
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * @param {Object} weatherData - –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
 * @returns {Promise<Array<string>>} –ú–∞—Å—Å–∏–≤ —Å–æ–≤–µ—Ç–æ–≤
 */
async function generateFarmerTips(weatherData) {
    try {
        const tips = await loadFarmerTips();
        if (!tips) {
            return getDefaultTips();
        }

        const result = [];
        const temp = weatherData.main.temp;
        const humidity = weatherData.main.humidity;

        // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        if (temp >= 25) result.push(...tips.temperature.hot.tips);
        else if (temp >= 15) result.push(...tips.temperature.moderate.tips);
        else result.push(...tips.temperature.cold.tips);

        // –°–æ–≤–µ—Ç—ã –ø–æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
        if (humidity >= 70) result.push(...tips.humidity.high.tips);
        else if (humidity >= 40) result.push(...tips.humidity.normal.tips);
        else result.push(...tips.humidity.low.tips);

        // –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
        result.push(...tips.seasons[getCurrentSeason()].tips);

        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return [...new Set(result)].slice(0, 5);
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤:', error.message);
        return getDefaultTips();
    }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–±–æ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
 * @returns {Array<string>} –ú–∞—Å—Å–∏–≤ —Å–æ–≤–µ—Ç–æ–≤
 */
function getDefaultTips() {
    return [
        "–ü–æ–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏", 
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ—á–≤—ã", 
        "–ó–∞—â–∏—â–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"
    ];
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –¥–Ω—è–º
 * @param {Object} forecast - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
 * @returns {Object} –ü—Ä–æ–≥–Ω–æ–∑, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–Ω—è–º
 */
function groupForecastByDays(forecast) {
    try {
        const dailyForecasts = {};
        
        forecast.list.forEach(item => {
            const date = new Date(item.dt * 1000);
            const day = date.toISOString().split('T')[0];
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if (!dailyForecasts[day]) {
                const fullDayName = getDayOfWeek(item.dt);
                const shortDayName = fullDayName.substring(0, 3);
                
                dailyForecasts[day] = {
                    date: day,
                    temps: [],
                    humidity: [],
                    windSpeed: [],
                    visibility: [],
                    feelsLike: [],
                    weather: [],
                    weatherData: [],
                    day: fullDayName,
                    shortDay: shortDayName,
                    hourlyData: []
                };
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            dailyForecasts[day].temps.push(item.main.temp);
            dailyForecasts[day].humidity.push(item.main.humidity);
            dailyForecasts[day].windSpeed.push(item.wind.speed);
            dailyForecasts[day].visibility.push(item.visibility);
            dailyForecasts[day].feelsLike.push(item.main.feels_like);
            
            if (item.weather && item.weather[0]) {
                dailyForecasts[day].weather.push(item.weather[0].icon);
                dailyForecasts[day].weatherData.push(item.weather[0]);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
            dailyForecasts[day].hourlyData.push(item);
        });
        
        return dailyForecasts;
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –¥–Ω—è–º:', error.message);
        return {};
    }
}

// ===== –§–£–ù–ö–¶–ò–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø UI =====

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
 */
function updateCurrentWeather(data) {
    try {
        const { main, weather, name, visibility, wind } = data;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if (elements.cityName) elements.cityName.textContent = name;
        if (elements.temperature) elements.temperature.textContent = `${Math.round(main.temp)}¬∞`;
        if (elements.weatherDescription && weather && weather[0]) {
            elements.weatherDescription.textContent = weather[0].description.charAt(0).toUpperCase() + 
                                                    weather[0].description.slice(1);
        }
        if (elements.feelsLike) elements.feelsLike.textContent = `${Math.round(main.feels_like)}¬∞`;
        if (elements.maxTemp) elements.maxTemp.textContent = Math.round(main.temp_max);
        if (elements.minTemp) elements.minTemp.textContent = Math.round(main.temp_min);
        if (elements.humidity) elements.humidity.textContent = `${main.humidity}%`;
        if (elements.windSpeed) elements.windSpeed.textContent = `${wind.speed.toFixed(1)} –º/—Å`;
        if (elements.visibility) elements.visibility.textContent = `${(visibility / 1000).toFixed(1)} –∫–º`;
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã:', error.message);
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
 * @param {Object} forecast - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
 */
function updateHourlyForecast(forecast) {
    try {
        if (!elements.forecastDays) return;
        elements.forecastDays.innerHTML = '';
        
        if (!forecast || !forecast.list || !Array.isArray(forecast.list)) {
            console.warn('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞:', forecast);
            return;
        }
        
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 24 —á–∞—Å–∞
        forecast.list.slice(0, 24).forEach((item, index) => {
            const hourlyDiv = document.createElement('div');
            hourlyDiv.className = 'forecast-hour';
            hourlyDiv.style.animationDelay = `${index * 0.1}s`;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
            const icon = item.weather && item.weather[0] && item.weather[0].icon 
                ? weatherEmoji[item.weather[0].icon] 
                : "üå¶Ô∏è";
            
            hourlyDiv.innerHTML = `
                <div class="forecast-time">${index === 0 ? '–°–µ–π—á–∞—Å' : formatTime(item.dt)}</div>
                <div class="forecast-icon">${icon}</div>
                <div class="forecast-temp">${Math.round(item.main.temp)}¬∞</div>
            `;
            
            elements.forecastDays.appendChild(hourlyDiv);
        });
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞:', error.message);
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
 * @param {Object} forecast - –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
 */
function updateWeeklyForecast(forecast) {
    try {
        if (!elements.weeklyForecastContainer) return;
        elements.weeklyForecastContainer.innerHTML = '';
        
        if (!forecast || !forecast.list || !Array.isArray(forecast.list)) {
            console.warn('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', forecast);
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º
        const dailyForecasts = groupForecastByDays(forecast);
        const uniqueDays = Object.values(dailyForecasts).slice(0, 7);
        
        uniqueDays.forEach((dayData, index) => {
            try {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                const avgTemp = Math.round(
                    dayData.temps.reduce((a, b) => a + b, 0) / dayData.temps.length
                );
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
                let mostFrequentIcon = "01d"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (dayData.weather && dayData.weather.length > 0) {
                    const iconCounts = {};
                    dayData.weather.forEach(icon => {
                        if (!iconCounts[icon]) {
                            iconCounts[icon] = 0;
                        }
                        iconCounts[icon]++;
                    });
                    
                    let maxIconCount = 0;
                    Object.entries(iconCounts).forEach(([icon, count]) => {
                        if (count > maxIconCount) {
                            maxIconCount = count;
                            mostFrequentIcon = icon;
                        }
                    });
                }
                
                // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                const dayElement = document.createElement('div');
                dayElement.className = 'weekly-day';
                dayElement.style.animationDelay = `${index * 0.1}s`;
                dayElement.setAttribute('data-date', dayData.date);
                
                dayElement.innerHTML = `
                    <div class="weekly-day-name">${dayData.day}</div>
                    <div class="weekly-day-icon">${weatherEmoji[mostFrequentIcon]}</div>
                    <div class="weekly-day-temp">${avgTemp}¬∞</div>
                `;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                dayElement.addEventListener('click', createRipple);
                dayElement.addEventListener('click', () => openDayWeatherModal(dayData));
                
                elements.weeklyForecastContainer.appendChild(dayElement);
            } catch (dayError) {
                console.warn('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–Ω—è –ø—Ä–æ–≥–Ω–æ–∑–∞:', dayError.message);
            }
        });
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞:', error.message);
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤
 * @param {Object} weatherData - –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
 */
async function updateFarmerTips(weatherData) {
    try {
        if (!elements.tipsContainer) return;
        elements.tipsContainer.innerHTML = '';
        
        const tips = await generateFarmerTips(weatherData);
        
        tips.forEach((tip, index) => {
            const tipElement = document.createElement('div');
            tipElement.className = 'tip-item';
            tipElement.style.animationDelay = `${index * 0.1}s`;
            
            tipElement.innerHTML = `
                <span class="tip-icon">üå±</span>
                <span class="tip-text">${tip}</span>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ ripple
            tipElement.addEventListener('click', createRipple);
            
            elements.tipsContainer.appendChild(tipElement);
        });
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤:', error.message);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (elements.tipsContainer) {
            elements.tipsContainer.innerHTML = `
                <div class="tip-item">
                    <span class="tip-icon">üå±</span>
                    <span class="tip-text">–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç</span>
                </div>
                <div class="tip-item">
                    <span class="tip-icon">üå±</span>
                    <span class="tip-text">–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–∏–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–æ–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏</span>
                </div>
            `;
        }
    }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ
 * @param {string} city - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 */
function showFallbackWeather(city) {
    try {
        // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const fallbackData = {
            weather: {
                main: { temp: 15, feels_like: 14, temp_max: 17, temp_min: 13, humidity: 70 },
                weather: [{ description: '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏', icon: '04d' }],
                name: city || DEFAULT_CITY,
                visibility: 10000,
                wind: { speed: 2.5 }
            },
            forecast: {
                list: Array(8).fill().map((_, index) => ({
                    dt: Math.floor(Date.now() / 1000) + index * 3600,
                    main: { temp: 15 - index % 3 },
                    weather: [{ icon: '04d' }]
                }))
            }
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        updateCurrentWeather(fallbackData.weather);
        updateHourlyForecast(fallbackData.forecast);
        
        // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        if (elements.weeklyForecastContainer) {
            elements.weeklyForecastContainer.innerHTML = '';
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
            const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
            const today = new Date();
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            for (let i = 0; i < 7; i++) {
                const date = new Date(today);
                date.setDate(today.getDate() + i);
                const dayName = days[date.getDay()];
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                const temp = Math.round(15 - i % 5 + Math.sin(i) * 3);
                
                const dayElement = document.createElement('div');
                dayElement.className = 'weekly-day';
                dayElement.style.animationDelay = `${i * 0.1}s`;
                
                dayElement.innerHTML = `
                    <div class="weekly-day-name">${dayName}</div>
                    <div class="weekly-day-icon">${weatherEmoji['04d']}</div>
                    <div class="weekly-day-temp">${temp}¬∞</div>
                `;
                
                elements.weeklyForecastContainer.appendChild(dayElement);
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã
        if (elements.tipsContainer) {
            elements.tipsContainer.innerHTML = `
                <div class="tip-item">
                    <span class="tip-icon">üå±</span>
                    <span class="tip-text">–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç</span>
                </div>
                <div class="tip-item">
                    <span class="tip-icon">üå±</span>
                    <span class="tip-text">–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–∏–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–æ–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏</span>
                </div>
            `;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if (elements.weatherResult) {
            elements.weatherResult.classList.remove('hidden');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ fallback –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
}

// ===== –§–£–ù–ö–¶–ò–ò –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê =====

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–≥–æ–¥–æ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
 * @param {Object} dayData - –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –¥–µ–Ω—å
 */
async function openDayWeatherModal(dayData) {
    try {
        if (!modalElements.dayModal || !dayData) return;
        
        // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–Ω–µ
        if (modalElements.dayName) modalElements.dayName.textContent = dayData.day;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const avgTemp = Math.round(dayData.temps.reduce((a, b) => a + b, 0) / dayData.temps.length);
        const maxTemp = Math.round(Math.max(...dayData.temps));
        const minTemp = Math.round(Math.min(...dayData.temps));
        const avgHumidity = Math.round(dayData.humidity.reduce((a, b) => a + b, 0) / dayData.humidity.length);
        const avgWindSpeed = (dayData.windSpeed.reduce((a, b) => a + b, 0) / dayData.windSpeed.length).toFixed(1);
        const avgVisibility = (dayData.visibility.reduce((a, b) => a + b, 0) / dayData.visibility.length / 1000).toFixed(1);
        const avgFeelsLike = Math.round(dayData.feelsLike.reduce((a, b) => a + b, 0) / dayData.feelsLike.length);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π —Ç–∏–ø –ø–æ–≥–æ–¥—ã
        let mostFrequentWeather = null;
        if (dayData.weatherData && dayData.weatherData.length > 0) {
            const weatherCounts = {};
            dayData.weatherData.forEach(item => {
                if (!weatherCounts[item.description]) {
                    weatherCounts[item.description] = 0;
                }
                weatherCounts[item.description]++;
            });
            
            let maxCount = 0;
            Object.entries(weatherCounts).forEach(([description, count]) => {
                if (count > maxCount) {
                    maxCount = count;
                    mostFrequentWeather = description;
                }
            });
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
        let mostFrequentIcon = "01d";
        if (dayData.weather && dayData.weather.length > 0) {
            const iconCounts = {};
            dayData.weather.forEach(icon => {
                if (!iconCounts[icon]) {
                    iconCounts[icon] = 0;
                }
                iconCounts[icon]++;
            });
            
            let maxIconCount = 0;
            Object.entries(iconCounts).forEach(([icon, count]) => {
                if (count > maxIconCount) {
                    maxIconCount = count;
                    mostFrequentIcon = icon;
                }
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        if (modalElements.temperature) modalElements.temperature.textContent = `${avgTemp}¬∞`;
        if (modalElements.weatherDescription) {
            modalElements.weatherDescription.textContent = mostFrequentWeather ? 
                mostFrequentWeather.charAt(0).toUpperCase() + mostFrequentWeather.slice(1) : "-";
        }
        if (modalElements.maxTemp) modalElements.maxTemp.textContent = maxTemp;
        if (modalElements.minTemp) modalElements.minTemp.textContent = minTemp;
        if (modalElements.humidity) modalElements.humidity.textContent = `${avgHumidity}%`;
        if (modalElements.windSpeed) modalElements.windSpeed.textContent = `${avgWindSpeed} –º/—Å`;
        if (modalElements.visibility) modalElements.visibility.textContent = `${avgVisibility} –∫–º`;
        if (modalElements.feelsLike) modalElements.feelsLike.textContent = `${avgFeelsLike}¬∞`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
        updateModalHourlyForecast(dayData.hourlyData);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
        await updateModalFarmerTips({
            main: { 
                temp: avgTemp, 
                humidity: avgHumidity, 
                feels_like: avgFeelsLike 
            },
            weather: [{ 
                description: mostFrequentWeather, 
                icon: mostFrequentIcon 
            }],
            wind: { 
                speed: avgWindSpeed 
            },
            visibility: avgVisibility * 1000
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modalElements.dayModal.classList.remove('hidden');
        document.body.classList.add('modal-open');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
        setTimeout(() => {
            modalElements.dayModal.classList.add('visible');
        }, 10);
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error.message);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è');
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
 * @param {Array} hourlyData - –î–∞–Ω–Ω—ã–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
 */
function updateModalHourlyForecast(hourlyData) {
    try {
        if (!modalElements.hourlyForecast) return;
        modalElements.hourlyForecast.innerHTML = '';
        
        if (!hourlyData || !Array.isArray(hourlyData)) {
            console.warn('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', hourlyData);
            return;
        }
        
        hourlyData.forEach((item, index) => {
            const hourlyDiv = document.createElement('div');
            hourlyDiv.className = 'forecast-hour';
            hourlyDiv.style.animationDelay = `${index * 0.1}s`;
            
            const icon = item.weather && item.weather[0] && item.weather[0].icon 
                ? weatherEmoji[item.weather[0].icon] 
                : "üå¶Ô∏è";
            
            hourlyDiv.innerHTML = `
                <div class="forecast-time">${formatTime(item.dt)}</div>
                <div class="forecast-icon">${icon}</div>
                <div class="forecast-temp">${Math.round(item.main.temp)}¬∞</div>
            `;
            
            modalElements.hourlyForecast.appendChild(hourlyDiv);
        });
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ:', error.message);
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–≤–µ—Ç—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
 * @param {Object} weatherData - –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
 */
async function updateModalFarmerTips(weatherData) {
    try {
        if (!modalElements.tipsContainer) return;
        modalElements.tipsContainer.innerHTML = '';
        
        const tips = await generateFarmerTips(weatherData);
        
        tips.forEach((tip, index) => {
            const tipElement = document.createElement('div');
            tipElement.className = 'tip-item';
            tipElement.style.animationDelay = `${index * 0.1}s`;
            
            tipElement.innerHTML = `
                <span class="tip-icon">üå±</span>
                <span class="tip-text">${tip}</span>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ ripple
            tipElement.addEventListener('click', createRipple);
            
            modalElements.tipsContainer.appendChild(tipElement);
        });
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ:', error.message);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (modalElements.tipsContainer) {
            modalElements.tipsContainer.innerHTML = `
                <div class="tip-item">
                    <span class="tip-icon">üå±</span>
                    <span class="tip-text">–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç</span>
                </div>
                <div class="tip-item">
                    <span class="tip-icon">üå±</span>
                    <span class="tip-text">–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–∏–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–æ–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏</span>
                </div>
            `;
        }
    }
}

/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */
function closeDayWeatherModal() {
    try {
        if (!modalElements.dayModal) return;
        
        modalElements.dayModal.classList.remove('visible');
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        setTimeout(() => {
            modalElements.dayModal.classList.add('hidden');
            document.body.classList.remove('modal-open');
        }, TIMEOUTS.ANIMATION);
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', error.message);
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (modalElements.dayModal) {
            modalElements.dayModal.classList.add('hidden');
        }
        document.body.classList.remove('modal-open');
    }
}

// ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
 * @param {string} city - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
 */
async function loadWeatherData(city) {
    // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (city === '–ú–æ—Å–∫–≤–∞') {
        city = DEFAULT_CITY;
    }
    
    console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è ${city}`);
    const startTime = Date.now();
    
    try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–µ—Ä–≤–∞—è –ª–∏ —ç—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞
        const isFirstLoad = elements.weatherResult && elements.weatherResult.classList.contains('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        if (isFirstLoad) {
            showLoading(`–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è ${city}...`);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
        const weatherPromise = Promise.race([
            fetchWeatherData(city),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∏—Å—Ç–µ–∫–ª–æ')), 
                TIMEOUTS.WEATHER_LOADING)
            )
        ]);
        
        const data = await weatherPromise;
        
        if (!data || !data.weather || !data.forecast) {
            throw new Error('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ');
        }
        
       // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateCurrentWeather(data.weather);
        updateHourlyForecast(data.forecast);
        updateWeeklyForecast(data.forecast);
        
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã
        setTimeout(async () => {
            try {
                await updateFarmerTips(data.weather);
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤:', e.message);
            }
        }, 10);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (elements.weatherResult) {
            elements.weatherResult.classList.remove('hidden');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        localStorage.setItem(LAST_CITY_KEY, city);
        
        console.log(`–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è ${city} –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ ${(Date.now() - startTime)/1000} —Å–µ–∫—É–Ω–¥`);
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:', error.message);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const cached = getCachedWeatherData();
        if (cached) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            try {
                updateCurrentWeather(cached.data.weather);
                updateHourlyForecast(cached.data.forecast);
                updateWeeklyForecast(cached.data.forecast);
                
                setTimeout(async () => {
                    try {
                        await updateFarmerTips(cached.data.weather);
                    } catch (e) {}
                }, 10);
                
                if (elements.weatherResult) {
                    elements.weatherResult.classList.remove('hidden');
                }
                
                showError(`–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. ${error.message}`);
                return;
            } catch (cacheError) {
                console.warn('–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–µ—à–∞:', cacheError.message);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–µ—à–∞ –∏–ª–∏ –∫–µ—à –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        if (city !== DEFAULT_CITY) {
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è "${city}". –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.`);
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            loadWeatherData(DEFAULT_CITY);
        } else {
            // –ï—Å–ª–∏ —É–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ: ${error.message}`);
            showFallbackWeather(city);
        }
    } finally {
        // –í—Å–µ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        hideLoading();
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö
 */
async function loadFreshWeatherData() {
    try {
        // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
        cleanupStorage();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        const savedCity = getLastCity();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        const geoPermission = await checkGeolocationPermission();
        
        // –ï—Å–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        if (geoPermission.state === 'denied' || geoPermission.state === 'unavailable') {
            console.log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–∞');
            try {
                // –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP
                const city = await getLocationByIP();
                await loadWeatherData(city);
            } catch (ipError) {
                console.warn('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP:', ipError.message);
                if (savedCity) {
                    await loadWeatherData(savedCity);
                } else {
                    await loadWeatherData(DEFAULT_CITY);
                }
            }
            return;
        }
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPS
        try {
            const locationPromise = Promise.race([
                getUserLocation(),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏')), 
                    TIMEOUTS.GEOLOCATION)
                )
            ]);
            
            const city = await locationPromise;
            await loadWeatherData(city);
        } catch (gpsError) {
            console.warn('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPS:', gpsError.message);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
            if (savedCity) {
                await loadWeatherData(savedCity);
            } else {
                // –ü—Ä–æ–±—É–µ–º IP-–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
                try {
                    const city = await getLocationByIP();
                    await loadWeatherData(city);
                } catch (ipError) {
                    console.warn('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP:', ipError.message);
                    await loadWeatherData(DEFAULT_CITY);
                }
            }
        }
    } catch (error) {
        console.warn('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞
 */
function handleSearch() {
    try {
        if (!elements.citySearch) return;
        
        const city = elements.citySearch.value.trim();
        if (!city) {
            showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –≥–æ—Ä–æ–¥–∞
        if (city.length < 2) {
            showError('–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –≥–æ—Ä–æ–¥–∞
        if (city.length > 50) {
            showError('–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if (!/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-,.]+$/.test(city)) {
            showError('–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã');
            return;
        }
        
        loadWeatherData(city);
        
        // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å –ø–æ–ª—è –≤–≤–æ–¥–∞
        elements.citySearch.blur();
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞:', error.message);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function initApp() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    
    try {
        // –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        cleanupStorage();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à - –µ—Å–ª–∏ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
        const cached = getCachedWeatherData();
        if (cached) {
            console.log('–ù–∞–π–¥–µ–Ω –∫–µ—à, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            updateCurrentWeather(cached.data.weather);
            updateHourlyForecast(cached.data.forecast);
            updateWeeklyForecast(cached.data.forecast);
            
            setTimeout(async () => {
                try {
                    await updateFarmerTips(cached.data.weather);
                } catch (e) {}
            }, 10);
            
            if (elements.weatherResult) {
                elements.weatherResult.classList.remove('hidden');
            }
            
            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            setTimeout(() => {
                loadFreshWeatherData();
            }, 500);
            
            return;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–µ—à–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        console.log('–ù–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
        showFallbackWeather(DEFAULT_CITY);
        
        // –ó–∞—Ç–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        setTimeout(() => {
            loadFreshWeatherData();
        }, 500);
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error.message);
        
        // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        showFallbackWeather(DEFAULT_CITY);
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
 */
function setupEventListeners() {
    try {
        // –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
        if (elements.searchButton) {
            elements.searchButton.addEventListener('click', handleSearch);
        }
        
        if (elements.citySearch) {
            elements.citySearch.addEventListener('keypress', (event) => {
                if (event.key === 'Enter') {
                    handleSearch();
                }
            });
        }
        
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (modalElements.closeModal) {
            modalElements.closeModal.addEventListener('click', closeDayWeatherModal);
        }
        
        if (modalElements.dayModal) {
            modalElements.dayModal.addEventListener('click', (event) => {
                if (event.target === modalElements.dayModal) {
                    closeDayWeatherModal();
                }
            });
        }

        // –≠—Ñ—Ñ–µ–∫—Ç ripple –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI
        document.querySelectorAll('.search-button, .detail-item, .tip-item, .weekly-day').forEach(element => {
            if (element) {
                element.addEventListener('click', createRipple);
            }
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        window.addEventListener('focus', () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∞
            const cached = getCachedWeatherData();
            if (cached) {
                const cacheTime = Date.now() - cached.timestamp;
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∫–µ—à —Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∏–¥–∏–º–∞
                if (cacheTime > 15 * 60 * 1000 && document.visibilityState === 'visible') {
                    let cityToUpdate = DEFAULT_CITY;
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    if (elements.cityName && elements.cityName.textContent && 
                        elements.cityName.textContent !== '-') {
                        cityToUpdate = elements.cityName.textContent;
                        if (cityToUpdate === '–ú–æ—Å–∫–≤–∞') {
                            cityToUpdate = DEFAULT_CITY;
                        }
                    } else if (cached.city && cached.city !== '–ú–æ—Å–∫–≤–∞') {
                        cityToUpdate = cached.city;
                    }
                    
                    loadWeatherData(cityToUpdate);
                }
            }
        });
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    try {
        // –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å jQuery
        if (typeof $ === 'undefined') {
            window.$ = function() {
                return {
                    ready: function(fn) { document.addEventListener('DOMContentLoaded', fn); return this; },
                    on: function() { return this; },
                    css: function() { return this; },
                    html: function() { return this; },
                    text: function() { return this; }
                };
            };
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            initApp();
        }, 100);
    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error.message);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ
        setTimeout(() => {
            try {
                showFallbackWeather(DEFAULT_CITY);
                if (elements.weatherResult) {
                    elements.weatherResult.classList.remove('hidden');
                }
            } catch (e) {}
        }, 1000);
    }
});
