const API_KEY = 'c708426913319b328c4ff4719583d1c6';
const BASE_URL = 'https://api.openweathermap.org';
const DEFAULT_CITY = '–ì—Ä–æ–∑–Ω—ã–π'; // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    citySearch: document.querySelector('#citySearch'),
    searchButton: document.querySelector('#searchButton'),
    weatherResult: document.querySelector('#weatherResult'),
    temperature: document.querySelector('#temperature'),
    cityName: document.querySelector('#cityName'),
    weatherDescription: document.querySelector('#weatherDescription'),
    feelsLike: document.querySelector('#feelsLike'),
    maxTemp: document.querySelector('#maxTemp'),
    minTemp: document.querySelector('#minTemp'),
    humidity: document.querySelector('#humidity'),
    windSpeed: document.querySelector('#windSpeed'),
    visibility: document.querySelector('#visibility'),
    forecastDays: document.querySelector('#forecastDays'),
    tipsContainer: document.querySelector('#tipsContainer'),
    weeklyForecastContainer: document.querySelector('#weeklyForecastContainer')
};

// –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
const modalElements = {
    dayModal: document.querySelector('#dayModal'),
    closeModal: document.querySelector('#closeModal'),
    dayName: document.querySelector('#modalDayName'),
    temperature: document.querySelector('#modalTemperature'),
    weatherDescription: document.querySelector('#modalWeatherDescription'),
    maxTemp: document.querySelector('#modalMaxTemp'),
    minTemp: document.querySelector('#modalMinTemp'),
    feelsLike: document.querySelector('#modalFeelsLike'),
    humidity: document.querySelector('#modalHumidity'),
    windSpeed: document.querySelector('#modalWindSpeed'),
    visibility: document.querySelector('#modalVisibility'),
    hourlyForecast: document.querySelector('#modalHourlyForecast'),
    tipsContainer: document.querySelector('#modalTipsContainer')
};

// –ò–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
const weatherEmoji = {
    "01d": "‚òÄÔ∏è", "01n": "üåô",
    "02d": "‚õÖ", "02n": "‚òÅÔ∏è",
    "03d": "‚òÅÔ∏è", "03n": "‚òÅÔ∏è",
    "04d": "‚òÅÔ∏è", "04n": "‚òÅÔ∏è",
    "09d": "üåßÔ∏è", "09n": "üåßÔ∏è",
    "10d": "üå¶Ô∏è", "10n": "üåßÔ∏è",
    "11d": "‚õàÔ∏è", "11n": "‚õàÔ∏è",
    "13d": "üå®Ô∏è", "13n": "üå®Ô∏è",
    "50d": "üå´Ô∏è", "50n": "üå´Ô∏è"
};

// –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å $ –≤ xman.js
document.addEventListener('DOMContentLoaded', () => {
    // –ï—Å–ª–∏ $ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    if (typeof $ === 'undefined') {
        window.$ = function() {
            console.warn('jQuery ($) –±—ã–ª –≤—ã–∑–≤–∞–Ω, –Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return {
                ready: function(fn) { document.addEventListener('DOMContentLoaded', fn); return this; },
                on: function() { return this; },
                css: function() { return this; },
                html: function() { return this; },
                text: function() { return this; }
            };
        };
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–≤–µ—Ç–æ–≤
async function loadFarmerTips() {
    try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–≤–µ—Ç–æ–≤...');
        const response = await fetch('https://alihanvu.github.io/weather-app/farmer-tips.json?' + new Date().getTime(), {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'Cache-Control': 'no-cache'
            }
        });
        
        console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('–°–æ–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
        return data;
    } catch (error) {
        console.error('–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–≤–µ—Ç–æ–≤:', error);
        
        try {
            // –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            const defaultTips = {
                "temperature": {
                    "hot": {
                        "tips": ["–ü–æ–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è —Ä–∞–Ω–æ —É—Ç—Ä–æ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º—É–ª—å—á—É –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤–ª–∞–≥–∏"]
                    },
                    "moderate": {
                        "tips": ["–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö"]
                    },
                    "cold": {
                        "tips": ["–ó–∞—â–∏—Ç–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç –∑–∞–º–æ—Ä–æ–∑–∫–æ–≤", "–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ–ª–∏–≤ –≤ —Ö–æ–ª–æ–¥–Ω—É—é –ø–æ–≥–æ–¥—É"]
                    }
                },
                "humidity": {
                    "high": {
                        "tips": ["–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –≥—Ä–∏–±–∫–æ–≤—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π", "–û–±–µ—Å–ø–µ—á—å—Ç–µ —Ö–æ—Ä–æ—à—É—é –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é —Ä–∞—Å—Ç–µ–Ω–∏–π"]
                    },
                    "normal": {
                        "tips": ["–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ–ª–∏–≤", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –ø–µ—Ä–µ–¥ –ø–æ–ª–∏–≤–æ–º"]
                    },
                    "low": {
                        "tips": ["–£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –ø–æ–ª–∏–≤–∞", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø–µ–ª—å–Ω–æ–≥–æ –æ—Ä–æ—à–µ–Ω–∏—è"]
                    }
                },
                "seasons": {
                    "spring": {
                        "tips": ["–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≥—Ä—è–¥–∫–∏ –∫ –ø–æ—Å–∞–¥–∫–µ", "–ù–∞—á–Ω–∏—Ç–µ –≤—ã—Å–∞–∂–∏–≤–∞—Ç—å —Ö–æ–ª–æ–¥–æ—Å—Ç–æ–π–∫–∏–µ –∫—É–ª—å—Ç—É—Ä—ã"]
                    },
                    "summer": {
                        "tips": ["–ó–∞—â–∏—Ç–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç –ø–µ—Ä–µ–≥—Ä–µ–≤–∞", "–°–æ–±–∏—Ä–∞–π—Ç–µ —É—Ä–æ–∂–∞–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ"]
                    },
                    "autumn": {
                        "tips": ["–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å–∞–¥ –∫ –∑–∏–º–µ", "–í—Ä–µ–º—è –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –æ–∑–∏–º—ã—Ö –∫—É–ª—å—Ç—É—Ä"]
                    },
                    "winter": {
                        "tips": ["–ó–∞—â–∏—Ç–∏—Ç–µ –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç –º–æ—Ä–æ–∑–∞", "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–æ—Å–∞–¥–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–∑–æ–Ω"]
                    }
                }
            };
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã');
            return defaultTips;
        } catch (altError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:', altError);
            return null;
        }
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(timestamp) {
    return new Date(timestamp * 1000).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
    });
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
function getDayOfWeek(timestamp) {
    const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    return days[new Date(timestamp * 1000).getDay()];
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
function getCurrentSeason() {
    const month = new Date().getMonth();
    if (month >= 2 && month <= 4) return 'spring';
    if (month >= 5 && month <= 7) return 'summer';
    if (month >= 8 && month <= 10) return 'autumn';
    return 'winter';
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP
async function getLocationByIP() {
    return new Promise((resolve, reject) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AbortController –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–∏—Ç—å fetch-–∑–∞–ø—Ä–æ—Å –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
        const controller = new AbortController();
        const signal = controller.signal;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ - 3 —Å–µ–∫—É–Ω–¥—ã
        const timeoutId = setTimeout(() => {
            controller.abort(); // –û—Ç–º–µ–Ω—è–µ–º fetch-–∑–∞–ø—Ä–æ—Å
            console.warn('–¢–∞–π–º–∞—É—Ç IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
            resolve(DEFAULT_CITY); // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≥–æ—Ä–æ–¥ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
        }, 3000);

        fetch('https://ipapi.co/json/', { signal })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP –æ—à–∏–±–∫–∞! —Å—Ç–∞—Ç—É—Å: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
                resolve(data.city || DEFAULT_CITY);
            })
            .catch(error => {
                clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if (error.name === 'AbortError') {
                    console.warn('–ó–∞–ø—Ä–æ—Å IP-–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞');
                    resolve(DEFAULT_CITY);
                } else {
                    console.error('–û—à–∏–±–∫–∞ IP-–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                    resolve(DEFAULT_CITY); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                }
            });
    });
}
// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function getUserLocation() {
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            reject(new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'));
            return;
        }

        const options = {
            enableHighAccuracy: false, // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ false –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            timeout: 5000, // 5 —Å–µ–∫—É–Ω–¥
            maximumAge: 60000 // –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ 1 –º–∏–Ω—É—Ç—ã
        };

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        const timeoutId = setTimeout(() => {
            reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏'));
        }, 6000); // 6 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å

        navigator.geolocation.getCurrentPosition(
            async (position) => {
                try {
                    clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏
                    const { latitude, longitude } = position.coords;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
                    const controller = new AbortController();
                    const signal = controller.signal;
                    
                    const apiTimeoutId = setTimeout(() => {
                        controller.abort();
                        reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è'));
                    }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã
                    
                    try {
                        const response = await fetch(
                            `${BASE_URL}/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&limit=1&appid=${API_KEY}`,
                            { signal }
                        );
                        
                        clearTimeout(apiTimeoutId);
                        
                        if (!response.ok) {
                            throw new Error(`HTTP –æ—à–∏–±–∫–∞! —Å—Ç–∞—Ç—É—Å: ${response.status}`);
                        }
                        
                        const data = await response.json();
                        if (data.length > 0) {
                            resolve(data[0].name);
                        } else {
                            reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥'));
                        }
                    } catch (fetchError) {
                        clearTimeout(apiTimeoutId);
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:', fetchError);
                        
                        if (fetchError.name === 'AbortError') {
                            reject(new Error('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ'));
                        } else {
                            reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É: ' + fetchError.message));
                        }
                    }
                } catch (error) {
                    clearTimeout(timeoutId);
                    reject(error);
                }
            },
            (error) => {
                clearTimeout(timeoutId);
                let errorMessage;
                switch(error.code) {
                    case error.PERMISSION_DENIED:
                        errorMessage = "–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â—ë–Ω";
                        break;
                    case error.POSITION_UNAVAILABLE:
                        errorMessage = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
                        break;
                    case error.TIMEOUT:
                        errorMessage = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏";
                        break;
                    default:
                        errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                }
                reject(new Error(errorMessage));
            },
            options
        );
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
function checkGeolocationPermission() {
    return new Promise((resolve) => {
        if (!navigator.geolocation) {
            resolve({ state: 'unavailable' });
            return;
        }
        
        // –ï—Å–ª–∏ API —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "unknown"
        if (!navigator.permissions || !navigator.permissions.query) {
            resolve({ state: 'unknown' });
            return;
        }
        
        navigator.permissions.query({ name: 'geolocation' }).then((permissionStatus) => {
            resolve({ state: permissionStatus.state });
            
            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            permissionStatus.onchange = function() {
                console.log('–°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω:', permissionStatus.state);
            };
        }).catch(() => {
            // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            resolve({ state: 'unknown' });
        });
    });
}

// –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
function cacheWeatherData(city, data) {
    localStorage.setItem('weatherData', JSON.stringify({
        city,
        data,
        timestamp: Date.now()
    }));
}

function getCachedWeatherData() {
    const cached = localStorage.getItem('weatherData');
    if (!cached) return null;
    
    const parsedData = JSON.parse(cached);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
    if (Date.now() - parsedData.timestamp > 3600000) return null;
    
    return parsedData;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function fetchWeatherData(city) {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        const cachedData = getCachedWeatherData();
        if (cachedData && cachedData.city === city) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è', city);
            return cachedData.data;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–æ–±–æ–≥–æ —Å–ª—É—á–∞—è –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ
        // –ò–Ω–æ–≥–¥–∞ API –º–æ–∂–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        let cityForApi = city;
        if (city === DEFAULT_CITY) {
            cityForApi = 'Grozny';
        } else if (city === '–ú–æ—Å–∫–≤–∞') {
            cityForApi = 'Moscow';
        }
        
        const geoUrl = `${BASE_URL}/geo/1.0/direct?q=${encodeURIComponent(cityForApi)}&limit=1&appid=${API_KEY}`;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AbortController –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–∞–π–º–∞—É—Ç–∞
        const controller = new AbortController();
        const signal = controller.signal;
        const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 —Å–µ–∫—É–Ω–¥
        
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', geoUrl);
        const geoResponse = await fetch(geoUrl, { signal });
        
        if (!geoResponse.ok) {
            clearTimeout(timeoutId);
            throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ${geoResponse.status}`);
        }
        
        const geoData = await geoResponse.json();
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', geoData);

        if (!geoData.length) {
            clearTimeout(timeoutId);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (city === DEFAULT_CITY || cityForApi === 'Grozny') {
                // –ñ–µ—Å—Ç–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ì—Ä–æ–∑–Ω–æ–≥–æ
                console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ì—Ä–æ–∑–Ω–æ–≥–æ');
                return fetchWeatherByCoords(43.3168, 45.6981, city);
            } else if (city === '–ú–æ—Å–∫–≤–∞' || cityForApi === 'Moscow') {
                // –ñ–µ—Å—Ç–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ú–æ—Å–∫–≤—ã (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–∞ –≤—Å–µ –µ—â–µ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
                console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ú–æ—Å–∫–≤—ã');
                return fetchWeatherByCoords(55.7558, 37.6173, DEFAULT_CITY); // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
            throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const { lat, lon } = geoData[0];
        clearTimeout(timeoutId);
        
        return fetchWeatherByCoords(lat, lon, city);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:', error);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞
        if (error.name === 'AbortError') {
            console.log('–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞');
            if (city === DEFAULT_CITY) {
                console.log('–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ì—Ä–æ–∑–Ω–æ–≥–æ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞');
                return fetchWeatherByCoords(43.3168, 45.6981, city);
            } else if (city === '–ú–æ—Å–∫–≤–∞') {
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
                return fetchWeatherByCoords(43.3168, 45.6981, DEFAULT_CITY);
            }
            throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
        throw error;
    }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
async function fetchWeatherByCoords(lat, lon, cityName) {
    try {
        console.log(`–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ${lat}, ${lon} –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${cityName}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º AbortController –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–∞–π–º–∞—É—Ç–∞
        const controller = new AbortController();
        const signal = controller.signal;
        const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 —Å–µ–∫—É–Ω–¥
        
        const weatherUrl = `${BASE_URL}/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`;
        const forecastUrl = `${BASE_URL}/data/2.5/forecast?lat=${lat}&lon=${lon}&units=metric&lang=ru&appid=${API_KEY}`;
        
        console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑–µ...');
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑
        const [weatherResponse, forecastResponse] = await Promise.all([
            fetch(weatherUrl, { signal }),
            fetch(forecastUrl, { signal })
        ]);
        
        clearTimeout(timeoutId);
        
        if (!weatherResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã: ${weatherResponse.status}`);
        }
        
        if (!forecastResponse.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: ${forecastResponse.status}`);
        }
        
        const weather = await weatherResponse.json();
        const forecast = await forecastResponse.json();
        
        // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º, –Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è,
        // –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (cityName === DEFAULT_CITY && weather.name !== DEFAULT_CITY) {
            weather.name = DEFAULT_CITY;
        }
        
        const result = { weather, forecast };
        
        // –ö–µ—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        cacheWeatherData(cityName, result);
        
        console.log('–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:', error);
        if (error.name === 'AbortError') {
            throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–≥–æ–¥—ã');
        }
        throw error;
    }
}
// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –¥–Ω—è–º
function groupForecastByDays(forecast) {
    const dailyForecasts = {};
    
    forecast.list.forEach(item => {
        const date = new Date(item.dt * 1000);
        const day = date.toISOString().split('T')[0];
        
        if (!dailyForecasts[day]) {
            const fullDayName = getDayOfWeek(item.dt);
            const shortDayName = fullDayName.substring(0, 3);
            
            dailyForecasts[day] = {
                date: day,
                temps: [],
                humidity: [],
                windSpeed: [],
                visibility: [],
                feelsLike: [],
                weather: [],
                weatherData: [],
                day: fullDayName,
                shortDay: shortDayName
            };
        }
        
        dailyForecasts[day].temps.push(item.main.temp);
        dailyForecasts[day].humidity.push(item.main.humidity);
        dailyForecasts[day].windSpeed.push(item.wind.speed);
        dailyForecasts[day].visibility.push(item.visibility);
        dailyForecasts[day].feelsLike.push(item.main.feels_like);
        
        if (item.weather && item.weather[0]) {
            dailyForecasts[day].weather.push(item.weather[0].icon);
            dailyForecasts[day].weatherData.push(item.weather[0]);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞
        if (!dailyForecasts[day].hourlyData) {
            dailyForecasts[day].hourlyData = [];
        }
        dailyForecasts[day].hourlyData.push(item);
    });
    
    return dailyForecasts;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é
async function generateFarmerTips(weatherData) {
    const tips = await loadFarmerTips();
    if (!tips) {
        return ["–ü–æ–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏", 
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ—á–≤—ã", 
                "–ó–∞—â–∏—â–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"];
    }

    const result = [];
    const temp = weatherData.main.temp;
    const humidity = weatherData.main.humidity;
    const windSpeed = weatherData.wind.speed;

    // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    if (temp >= 25) result.push(...tips.temperature.hot.tips);
    else if (temp >= 15) result.push(...tips.temperature.moderate.tips);
    else result.push(...tips.temperature.cold.tips);

    // –°–æ–≤–µ—Ç—ã –ø–æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    if (humidity >= 70) result.push(...tips.humidity.high.tips);
    else if (humidity >= 40) result.push(...tips.humidity.normal.tips);
    else result.push(...tips.humidity.low.tips);

    // –°–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
    result.push(...tips.seasons[getCurrentSeason()].tips);

    return [...new Set(result)].slice(0, 5);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
function updateCurrentWeather(data) {
    try {
        const { main, weather, name, visibility, wind } = data;
        
        elements.cityName.textContent = name;
        elements.temperature.textContent = `${Math.round(main.temp)}¬∞`;
        elements.weatherDescription.textContent = weather[0].description.charAt(0).toUpperCase() + 
                                                weather[0].description.slice(1);
        elements.feelsLike.textContent = `${Math.round(main.feels_like)}¬∞`;
        elements.maxTemp.textContent = Math.round(main.temp_max);
        elements.minTemp.textContent = Math.round(main.temp_min);
        elements.humidity.textContent = `${main.humidity}%`;
        elements.windSpeed.textContent = `${wind.speed.toFixed(1)} –º/—Å`;
        elements.visibility.textContent = `${(visibility / 1000).toFixed(1)} –∫–º`;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
function updateHourlyForecast(forecast) {
    try {
        elements.forecastDays.innerHTML = '';
        
        if (!forecast || !forecast.list || !Array.isArray(forecast.list)) {
            console.error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞:', forecast);
            return;
        }
        
        forecast.list.slice(0, 24).forEach((item, index) => {
            const hourlyDiv = document.createElement('div');
            hourlyDiv.className = 'forecast-hour';
            hourlyDiv.style.animationDelay = `${index * 0.1}s`;
            
            const icon = item.weather && item.weather[0] && item.weather[0].icon 
                ? weatherEmoji[item.weather[0].icon] 
                : "üå¶Ô∏è";
            
            hourlyDiv.innerHTML = `
                <div class="forecast-time">${index === 0 ? '–°–µ–π—á–∞—Å' : formatTime(item.dt)}</div>
                <div class="forecast-icon">${icon}</div>
                <div class="forecast-temp">${Math.round(item.main.temp)}¬∞</div>
            `;
            
            elements.forecastDays.appendChild(hourlyDiv);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–æ–≥–æ–¥–æ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
async function openDayWeatherModal(dayData) {
    try {
        // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–Ω–µ
        modalElements.dayName.textContent = dayData.day;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const avgTemp = Math.round(dayData.temps.reduce((a, b) => a + b, 0) / dayData.temps.length);
        const maxTemp = Math.round(Math.max(...dayData.temps));
        const minTemp = Math.round(Math.min(...dayData.temps));
        const avgHumidity = Math.round(dayData.humidity.reduce((a, b) => a + b, 0) / dayData.humidity.length);
        const avgWindSpeed = (dayData.windSpeed.reduce((a, b) => a + b, 0) / dayData.windSpeed.length).toFixed(1);
        const avgVisibility = (dayData.visibility.reduce((a, b) => a + b, 0) / dayData.visibility.length / 1000).toFixed(1);
        const avgFeelsLike = Math.round(dayData.feelsLike.reduce((a, b) => a + b, 0) / dayData.feelsLike.length);
        
       // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π —Ç–∏–ø –ø–æ–≥–æ–¥—ã
let mostFrequentWeather = null;
if (dayData.weatherData && dayData.weatherData.length > 0) {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–≥–æ–¥–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ —á–∞—Å—Ç–æ–µ
    const weatherCounts = {};
    dayData.weatherData.forEach(item => {
        if (!weatherCounts[item.description]) {
            weatherCounts[item.description] = 0;
        }
        weatherCounts[item.description]++;
    });
    
    let maxCount = 0;
    for (const [description, count] of Object.entries(weatherCounts)) {
        if (count > maxCount) {
            maxCount = count;
            mostFrequentWeather = description;
        }
    }
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
let mostFrequentIcon = "01d";
if (dayData.weather && dayData.weather.length > 0) {
    const iconCounts = {};
    dayData.weather.forEach(icon => {
        if (!iconCounts[icon]) {
            iconCounts[icon] = 0;
        }
        iconCounts[icon]++;
    });
    
    let maxIconCount = 0;
    for (const [icon, count] of Object.entries(iconCounts)) {
        if (count > maxIconCount) {
            maxIconCount = count;
            mostFrequentIcon = icon;
        }
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
modalElements.temperature.textContent = `${avgTemp}¬∞`;
modalElements.weatherDescription.textContent = mostFrequentWeather ? 
    mostFrequentWeather.charAt(0).toUpperCase() + mostFrequentWeather.slice(1) : "-";
modalElements.maxTemp.textContent = maxTemp;
modalElements.minTemp.textContent = minTemp;
modalElements.humidity.textContent = `${avgHumidity}%`;
modalElements.windSpeed.textContent = `${avgWindSpeed} –º/—Å`;
modalElements.visibility.textContent = `${avgVisibility} –∫–º`;
modalElements.feelsLike.textContent = `${avgFeelsLike}¬∞`;

// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
updateModalHourlyForecast(dayData.hourlyData);

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
await updateModalFarmerTips({
    main: { 
        temp: avgTemp, 
        humidity: avgHumidity, 
        feels_like: avgFeelsLike 
    },
    weather: [{ 
        description: mostFrequentWeather, 
        icon: mostFrequentIcon 
    }],
    wind: { 
        speed: avgWindSpeed 
    },
    visibility: avgVisibility * 1000
});

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
modalElements.dayModal.classList.remove('hidden');
document.body.classList.add('modal-open');

// –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
setTimeout(() => {
    modalElements.dayModal.classList.add('visible');
}, 10);
} catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–≥–æ–¥—ã:', error);
    showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è');
}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
function updateModalHourlyForecast(hourlyData) {
    modalElements.hourlyForecast.innerHTML = '';
    
    if (!hourlyData || !Array.isArray(hourlyData)) {
        console.error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', hourlyData);
        return;
    }
    
    hourlyData.forEach((item, index) => {
        const hourlyDiv = document.createElement('div');
        hourlyDiv.className = 'forecast-hour';
        hourlyDiv.style.animationDelay = `${index * 0.1}s`;
        
        const icon = item.weather && item.weather[0] && item.weather[0].icon 
            ? weatherEmoji[item.weather[0].icon] 
            : "üå¶Ô∏è";
        
        hourlyDiv.innerHTML = `
            <div class="forecast-time">${formatTime(item.dt)}</div>
            <div class="forecast-icon">${icon}</div>
            <div class="forecast-temp">${Math.round(item.main.temp)}¬∞</div>
        `;
        
        modalElements.hourlyForecast.appendChild(hourlyDiv);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
async function updateModalFarmerTips(weatherData) {
    try {
        const tips = await generateFarmerTips(weatherData);
        modalElements.tipsContainer.innerHTML = '';
        
        tips.forEach((tip, index) => {
            const tipElement = document.createElement('div');
            tipElement.className = 'tip-item';
            tipElement.style.animationDelay = `${index * 0.1}s`;
            
            tipElement.innerHTML = `
                <span class="tip-icon">üå±</span>
                <span class="tip-text">${tip}</span>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ ripple
            tipElement.addEventListener('click', createRipple);
            
            modalElements.tipsContainer.appendChild(tipElement);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        modalElements.tipsContainer.innerHTML = `
            <div class="tip-item">
                <span class="tip-icon">üå±</span>
                <span class="tip-text">–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç</span>
            </div>
            <div class="tip-item">
                <span class="tip-icon">üå±</span>
                <span class="tip-text">–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–∏–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–æ–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏</span>
            </div>
        `;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeDayWeatherModal() {
    modalElements.dayModal.classList.remove('visible');
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    setTimeout(() => {
        modalElements.dayModal.classList.add('hidden');
        document.body.classList.remove('modal-open');
    }, 300);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
function updateWeeklyForecast(forecast) {
    try {
        elements.weeklyForecastContainer.innerHTML = '';
        
        if (!forecast || !forecast.list || !Array.isArray(forecast.list)) {
            console.error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', forecast);
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –¥–Ω—è–º
        const dailyForecasts = groupForecastByDays(forecast);
        
        // –í—ã–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–Ω–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        const uniqueDays = Object.values(dailyForecasts).slice(0, 7);
        
        uniqueDays.forEach((dayData, index) => {
            const avgTemp = Math.round(
                dayData.temps.reduce((a, b) => a + b, 0) / dayData.temps.length
            );
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –ø–æ–≥–æ–¥—ã
            let mostFrequentIcon = "01d"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (dayData.weather && dayData.weather.length > 0) {
                const iconCounts = {};
                dayData.weather.forEach(icon => {
                    if (!iconCounts[icon]) {
                        iconCounts[icon] = 0;
                    }
                    iconCounts[icon]++;
                });
                
                let maxIconCount = 0;
                for (const [icon, count] of Object.entries(iconCounts)) {
                    if (count > maxIconCount) {
                        maxIconCount = count;
                        mostFrequentIcon = icon;
                    }
                }
            }
            
            const dayElement = document.createElement('div');
            dayElement.className = 'weekly-day';
            dayElement.style.animationDelay = `${index * 0.1}s`;
            dayElement.setAttribute('data-date', dayData.date);
            
            dayElement.innerHTML = `
                <div class="weekly-day-name">${dayData.day}</div>
                <div class="weekly-day-icon">${weatherEmoji[mostFrequentIcon]}</div>
                <div class="weekly-day-temp">${avgTemp}¬∞</div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ ripple
            dayElement.addEventListener('click', createRipple);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            dayElement.addEventListener('click', () => {
                openDayWeatherModal(dayData);
            });
            
            elements.weeklyForecastContainer.appendChild(dayElement);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function updateFarmerTips(weatherData) {
    try {
        const tips = await generateFarmerTips(weatherData);
        elements.tipsContainer.innerHTML = '';
        
        tips.forEach((tip, index) => {
            const tipElement = document.createElement('div');
            tipElement.className = 'tip-item';
            tipElement.style.animationDelay = `${index * 0.1}s`;
            
            tipElement.innerHTML = `
                <span class="tip-icon">üå±</span>
                <span class="tip-text">${tip}</span>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ ripple
            tipElement.addEventListener('click', createRipple);
            
            elements.tipsContainer.appendChild(tipElement);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        elements.tipsContainer.innerHTML = `
            <div class="tip-item">
                <span class="tip-icon">üå±</span>
                <span class="tip-text">–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç</span>
            </div>
            <div class="tip-item">
                <span class="tip-icon">üå±</span>
                <span class="tip-text">–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–∏–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–æ–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏</span>
            </div>
        `;
    }
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
function showError(message) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    const existingErrors = document.querySelectorAll('.error-notification');
    existingErrors.forEach(error => error.remove());
    
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-notification';
    errorDiv.textContent = message;
    document.body.appendChild(errorDiv);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => errorDiv.classList.add('show'), 10);
    
    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        errorDiv.classList.add('hide');
        setTimeout(() => errorDiv.remove(), 300);
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ (fallback)
function showFallbackWeather(city) {
    console.log('–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è:', city);
    
    const fallbackData = {
        weather: {
            main: { temp: 15, feels_like: 14, temp_max: 17, temp_min: 13, humidity: 70 },
            weather: [{ description: '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏', icon: '04d' }],
            name: city || DEFAULT_CITY,
            visibility: 10000,
            wind: { speed: 2.5 }
        },
        forecast: {
            list: Array(8).fill().map((_, index) => ({
                dt: Math.floor(Date.now() / 1000) + index * 3600,
                main: { temp: 15 - index % 3 },
                weather: [{ icon: '04d' }]
            }))
        }
    };
    
    try {
        updateCurrentWeather(fallbackData.weather);
        updateHourlyForecast(fallbackData.forecast);
        
        // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        elements.weeklyForecastContainer.innerHTML = '';
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
        const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
        const today = new Date();
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        for (let i = 0; i < 7; i++) {
            const date = new Date(today);
            date.setDate(today.getDate() + i);
            const dayName = days[date.getDay()];
            
            const temp = Math.round(15 - i % 5 + Math.sin(i) * 3); // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            
            const dayElement = document.createElement('div');
            dayElement.className = 'weekly-day';
            dayElement.style.animationDelay = `${i * 0.1}s`;
            
            dayElement.innerHTML = `
                <div class="weekly-day-name">${dayName}</div>
                <div class="weekly-day-icon">${weatherEmoji['04d']}</div>
                <div class="weekly-day-temp">${temp}¬∞</div>
            `;
            
            elements.weeklyForecastContainer.appendChild(dayElement);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã
        elements.tipsContainer.innerHTML = `
            <div class="tip-item">
                <span class="tip-icon">üå±</span>
                <span class="tip-text">–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç</span>
            </div>
            <div class="tip-item">
                <span class="tip-icon">üå±</span>
                <span class="tip-text">–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª–∏–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–æ–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏</span>
            </div>
        `;
        
        elements.weatherResult.classList.remove('hidden');
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ fallback –¥–∞–Ω–Ω—ã—Ö:', e);
    }
}
// –ò–Ω–¥–∏–∫–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
function showLoading(message = '–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...') {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–≤–µ—Ä–ª–µ–π –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    hideLoading();
    
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏:', message);
    
    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'loading-overlay';
    loadingDiv.id = 'loadingOverlay'; // –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    loadingDiv.innerHTML = `
        <div class="loading-spinner">
            <div class="loading-text">${message}</div>
        </div>
    `;
    document.body.appendChild(loadingDiv);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    if (window._loadingTimeout) {
        clearTimeout(window._loadingTimeout);
    }
    
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—á–µ–∑–Ω–µ—Ç —Å–ø—É—Å—Ç—è –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    window._loadingTimeout = setTimeout(() => {
        console.warn('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
        hideLoading();
    }, 12000); // 12 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
}

function hideLoading() {
    if (window._loadingTimeout) {
        clearTimeout(window._loadingTimeout);
        window._loadingTimeout = null;
    }
    
    const loadingDiv = document.querySelector('.loading-overlay');
    if (loadingDiv) {
        console.log('–°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏');
        loadingDiv.classList.add('fade-out');
        setTimeout(() => {
            if (loadingDiv.parentNode) {
                loadingDiv.remove();
            }
        }, 300);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ ripple
function createRipple(event) {
    const target = event.currentTarget;
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã ripple
    const existingRipples = target.querySelectorAll('.ripple');
    existingRipples.forEach(ripple => ripple.remove());
    
    const ripple = document.createElement('span');
    const diameter = Math.max(target.clientWidth, target.clientHeight);
    const radius = diameter / 2;

    const rect = target.getBoundingClientRect();
    ripple.style.width = ripple.style.height = `${diameter}px`;
    ripple.style.left = `${event.clientX - rect.left - radius}px`;
    ripple.style.top = `${event.clientY - rect.top - radius}px`;
    ripple.className = 'ripple';

    target.appendChild(ripple);
    
    // –£–¥–∞–ª—è–µ–º ripple –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        if (ripple && ripple.parentNode === target) {
            target.removeChild(ripple);
        }
    }, 600);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
function getLastCity() {
    const lastCity = localStorage.getItem('lastLoadedCity');
    // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ú–æ—Å–∫–≤–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (lastCity === '–ú–æ—Å–∫–≤–∞') {
        return null;
    }
    return lastCity || null;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è loadWeatherData —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º fallback
async function loadWeatherData(city) {
    // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (city === '–ú–æ—Å–∫–≤–∞') {
        city = DEFAULT_CITY;
    }
    
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const startTime = Date.now();
    let fallbackUsed = false;
    let globalTimeoutId;
    
    try {
        showLoading(`–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è ${city}...`);
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ - 10 —Å–µ–∫—É–Ω–¥
        globalTimeoutId = setTimeout(() => {
            console.warn(`–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è ${city} - –ø—Ä–æ—à–ª–æ ${(Date.now() - startTime)/1000} —Å–µ–∫—É–Ω–¥`);
            hideLoading();
            showError(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
            
            // –í —Å–ª—É—á–∞–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
            showFallbackWeather(city);
            fallbackUsed = true;
        }, 10000);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã - 8 —Å–µ–∫—É–Ω–¥
        const weatherPromise = Promise.race([
            fetchWeatherData(city),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –∏—Å—Ç–µ–∫–ª–æ')), 8000)
            )
        ]);
        
        const data = await weatherPromise;
        
        // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
        clearTimeout(globalTimeoutId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!data || !data.weather || !data.forecast) {
            throw new Error('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ');
        }
        
        updateCurrentWeather(data.weather);
        updateHourlyForecast(data.forecast);
        updateWeeklyForecast(data.forecast);
        await updateFarmerTips(data.weather);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        elements.weatherResult.classList.remove('hidden');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        localStorage.setItem('lastLoadedCity', city);
        
        console.log(`–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è ${city} –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ ${(Date.now() - startTime)/1000} —Å–µ–∫—É–Ω–¥`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:', error);
        
        // –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
        if (fallbackUsed) return;
        
        try {
            // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π
            clearTimeout(globalTimeoutId);
        } catch(e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–π–º–∞—É—Ç–∞
        }
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–µ—à–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        const cached = getCachedWeatherData();
        if (cached) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
            try {
                updateCurrentWeather(cached.data.weather);
                updateHourlyForecast(cached.data.forecast);
                updateWeeklyForecast(cached.data.forecast);
                await updateFarmerTips(cached.data.weather);
                elements.weatherResult.classList.remove('hidden');
                showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞.`);
                return;
            } catch (cacheError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–µ—à–∞:', cacheError);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–µ—à–∞ –∏–ª–∏ –∫–µ—à –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (city !== DEFAULT_CITY) {
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è "${city}". –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.`);
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –µ—â–µ –Ω–µ –ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await loadWeatherData(DEFAULT_CITY);
        } else {
            // –ï—Å–ª–∏ –º—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ì—Ä–æ–∑–Ω—ã–π –∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ: ${error.message}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            showFallbackWeather(city);
        }
    } finally {
        hideLoading();
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–∫–∞–∑–∞ –æ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async function initApp() {
    // –û—á–∏—â–∞–µ–º localStorage –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≥–¥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ú–æ—Å–∫–≤–∞
    const lastCity = localStorage.getItem('lastLoadedCity');
    if (lastCity === '–ú–æ—Å–∫–≤–∞') {
        localStorage.removeItem('lastLoadedCity');
        localStorage.removeItem('weatherData');
    }
    
    showLoading('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        const lastCity = getLastCity();
        
        if (lastCity) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥, —Å–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
            console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞:', lastCity);
            await loadWeatherData(lastCity);
            // –ù–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        const geoPermission = await checkGeolocationPermission();
        
        if (geoPermission.state === 'denied') {
            // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø —è–≤–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            console.log('–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            if (!lastCity) {
                showLoading('–û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP...');
                try {
                    const city = await getLocationByIP();
                    await loadWeatherData(city);
                } catch (ipError) {
                    console.error('–û—à–∏–±–∫–∞ IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', ipError);
                    await loadWeatherData(DEFAULT_CITY);
                }
            }
            return;
        }
        
        if (geoPermission.state === 'unavailable') {
            // –ï—Å–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            console.log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
            if (!lastCity) {
                showLoading('–û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP...');
                try {
                    const city = await getLocationByIP();
                    await loadWeatherData(city);
                } catch (ipError) {
                    console.error('–û—à–∏–±–∫–∞ IP –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', ipError);
                    await loadWeatherData(DEFAULT_CITY);
                }
            }
            return;
        }
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ —è–≤–Ω–æ
        if (!lastCity) {
            showLoading('–û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...');
        }
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPS —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try {
            const locationPromise = Promise.race([
                getUserLocation(),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏')), 7000)
                )
            ]);
            
            const city = await locationPromise;
            await loadWeatherData(city);
        } catch (gpsError) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPS:', gpsError);
            
            // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            if (!lastCity) {
                try {
                    showLoading('–û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP...');
                    const city = await getLocationByIP();
                    await loadWeatherData(city);
                } catch (ipError) {
                    console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP:', ipError);
                    await loadWeatherData(DEFAULT_CITY);
                }
            }
        }
    } catch (error) {
        console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        
        // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try {
            await loadWeatherData(DEFAULT_CITY);
        } catch (finalError) {
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', finalError);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
        }
    } finally {
        hideLoading();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–≤–æ–¥–∞
function handleSearch() {
    const city = elements.citySearch.value.trim();
    if (!city) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –≥–æ—Ä–æ–¥–∞
    if (city.length < 2) {
        showError('–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –≥–æ—Ä–æ–¥–∞
    if (city.length > 50) {
        showError('–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ');
        return;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if (!/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-,.]+$/.test(city)) {
        showError('–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã');
        return;
    }
    
    loadWeatherData(city);
    
    // –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å –ø–æ–ª—è –≤–≤–æ–¥–∞, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    elements.citySearch.blur();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    // –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å $ –≤ xman.js
    if (typeof $ === 'undefined') {
        window.$ = function() {
            console.warn('jQuery ($) –±—ã–ª –≤—ã–∑–≤–∞–Ω, –Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            return {
                ready: function(fn)
